<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="646" onload="init(evt)" viewBox="0 0 1200 646" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="646" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="629.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="629.00"> </text><svg id="frames" x="10" width="1180" total_samples="11444"><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (9 samples, 0.08%)</title><rect x="0.0000%" y="565" width="0.0786%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="9"/><text x="0.2500%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (8 samples, 0.07%)</title><rect x="0.0786%" y="549" width="0.0699%" height="15" fill="rgb(217,0,24)" fg:x="9" fg:w="8"/><text x="0.3286%" y="559.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (4 samples, 0.03%)</title><rect x="0.1485%" y="549" width="0.0350%" height="15" fill="rgb(221,193,54)" fg:x="17" fg:w="4"/><text x="0.3985%" y="559.50"></text></g><g><title>__GI___libc_malloc (6 samples, 0.05%)</title><rect x="0.1835%" y="549" width="0.0524%" height="15" fill="rgb(248,212,6)" fg:x="21" fg:w="6"/><text x="0.4335%" y="559.50"></text></g><g><title>__memcmp_avx2_movbe (26 samples, 0.23%)</title><rect x="0.2359%" y="549" width="0.2272%" height="15" fill="rgb(208,68,35)" fg:x="27" fg:w="26"/><text x="0.4859%" y="559.50"></text></g><g><title>_int_free (14 samples, 0.12%)</title><rect x="0.4719%" y="549" width="0.1223%" height="15" fill="rgb(232,128,0)" fg:x="54" fg:w="14"/><text x="0.7219%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (2 samples, 0.02%)</title><rect x="1.0398%" y="517" width="0.0175%" height="15" fill="rgb(207,160,47)" fg:x="119" fg:w="2"/><text x="1.2898%" y="527.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (2 samples, 0.02%)</title><rect x="1.0398%" y="501" width="0.0175%" height="15" fill="rgb(228,23,34)" fg:x="119" fg:w="2"/><text x="1.2898%" y="511.50"></text></g><g><title>core::hash::BuildHasher::hash_one (60 samples, 0.52%)</title><rect x="0.5942%" y="549" width="0.5243%" height="15" fill="rgb(218,30,26)" fg:x="68" fg:w="60"/><text x="0.8442%" y="559.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (9 samples, 0.08%)</title><rect x="1.0398%" y="533" width="0.0786%" height="15" fill="rgb(220,122,19)" fg:x="119" fg:w="9"/><text x="1.2898%" y="543.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for (A,B)&gt;::hash (7 samples, 0.06%)</title><rect x="1.0573%" y="517" width="0.0612%" height="15" fill="rgb(250,228,42)" fg:x="121" fg:w="7"/><text x="1.3073%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (7 samples, 0.06%)</title><rect x="1.0573%" y="501" width="0.0612%" height="15" fill="rgb(240,193,28)" fg:x="121" fg:w="7"/><text x="1.3073%" y="511.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (7 samples, 0.06%)</title><rect x="1.0573%" y="485" width="0.0612%" height="15" fill="rgb(216,20,37)" fg:x="121" fg:w="7"/><text x="1.3073%" y="495.50"></text></g><g><title>core::hash::Hasher::write_u8 (4 samples, 0.03%)</title><rect x="1.0835%" y="469" width="0.0350%" height="15" fill="rgb(206,188,39)" fg:x="124" fg:w="4"/><text x="1.3335%" y="479.50"></text></g><g><title>nand2tetris::vm::&lt;impl nand2tetris::hardware::RAM&gt;::get (54 samples, 0.47%)</title><rect x="1.1185%" y="549" width="0.4719%" height="15" fill="rgb(217,207,13)" fg:x="128" fg:w="54"/><text x="1.3685%" y="559.50"></text></g><g><title>nand2tetris::vm::&lt;impl nand2tetris::hardware::RAM&gt;::set (43 samples, 0.38%)</title><rect x="1.5904%" y="549" width="0.3757%" height="15" fill="rgb(231,73,38)" fg:x="182" fg:w="43"/><text x="1.8404%" y="559.50"></text></g><g><title>[[heap]] (228 samples, 1.99%)</title><rect x="0.0786%" y="565" width="1.9923%" height="15" fill="rgb(225,20,46)" fg:x="9" fg:w="228"/><text x="0.3286%" y="575.50">[..</text></g><g><title>nand2tetris::vm::VM::step (12 samples, 0.10%)</title><rect x="1.9661%" y="549" width="0.1049%" height="15" fill="rgb(210,31,41)" fg:x="225" fg:w="12"/><text x="2.2161%" y="559.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::last (12 samples, 0.10%)</title><rect x="1.9661%" y="533" width="0.1049%" height="15" fill="rgb(221,200,47)" fg:x="225" fg:w="12"/><text x="2.2161%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (7 samples, 0.06%)</title><rect x="2.1933%" y="469" width="0.0612%" height="15" fill="rgb(226,26,5)" fg:x="251" fg:w="7"/><text x="2.4433%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (7 samples, 0.06%)</title><rect x="2.1933%" y="453" width="0.0612%" height="15" fill="rgb(249,33,26)" fg:x="251" fg:w="7"/><text x="2.4433%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (7 samples, 0.06%)</title><rect x="2.1933%" y="437" width="0.0612%" height="15" fill="rgb(235,183,28)" fg:x="251" fg:w="7"/><text x="2.4433%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (7 samples, 0.06%)</title><rect x="2.1933%" y="421" width="0.0612%" height="15" fill="rgb(221,5,38)" fg:x="251" fg:w="7"/><text x="2.4433%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (7 samples, 0.06%)</title><rect x="2.1933%" y="405" width="0.0612%" height="15" fill="rgb(247,18,42)" fg:x="251" fg:w="7"/><text x="2.4433%" y="415.50"></text></g><g><title>alloc::alloc::alloc (7 samples, 0.06%)</title><rect x="2.1933%" y="389" width="0.0612%" height="15" fill="rgb(241,131,45)" fg:x="251" fg:w="7"/><text x="2.4433%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (23 samples, 0.20%)</title><rect x="2.0710%" y="549" width="0.2010%" height="15" fill="rgb(249,31,29)" fg:x="237" fg:w="23"/><text x="2.3210%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (9 samples, 0.08%)</title><rect x="2.1933%" y="533" width="0.0786%" height="15" fill="rgb(225,111,53)" fg:x="251" fg:w="9"/><text x="2.4433%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (9 samples, 0.08%)</title><rect x="2.1933%" y="517" width="0.0786%" height="15" fill="rgb(238,160,17)" fg:x="251" fg:w="9"/><text x="2.4433%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (9 samples, 0.08%)</title><rect x="2.1933%" y="501" width="0.0786%" height="15" fill="rgb(214,148,48)" fg:x="251" fg:w="9"/><text x="2.4433%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (9 samples, 0.08%)</title><rect x="2.1933%" y="485" width="0.0786%" height="15" fill="rgb(232,36,49)" fg:x="251" fg:w="9"/><text x="2.4433%" y="495.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (2 samples, 0.02%)</title><rect x="2.2545%" y="469" width="0.0175%" height="15" fill="rgb(209,103,24)" fg:x="258" fg:w="2"/><text x="2.5045%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.02%)</title><rect x="2.2545%" y="453" width="0.0175%" height="15" fill="rgb(229,88,8)" fg:x="258" fg:w="2"/><text x="2.5045%" y="463.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (24 samples, 0.21%)</title><rect x="2.2719%" y="549" width="0.2097%" height="15" fill="rgb(213,181,19)" fg:x="260" fg:w="24"/><text x="2.5219%" y="559.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (20 samples, 0.17%)</title><rect x="2.3069%" y="533" width="0.1748%" height="15" fill="rgb(254,191,54)" fg:x="264" fg:w="20"/><text x="2.5569%" y="543.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (20 samples, 0.17%)</title><rect x="2.3069%" y="517" width="0.1748%" height="15" fill="rgb(241,83,37)" fg:x="264" fg:w="20"/><text x="2.5569%" y="527.50"></text></g><g><title>&lt;std::time::Instant as core::ops::arith::Sub&gt;::sub (100 samples, 0.87%)</title><rect x="2.4816%" y="549" width="0.8738%" height="15" fill="rgb(233,36,39)" fg:x="284" fg:w="100"/><text x="2.7316%" y="559.50"></text></g><g><title>std::time::Instant::duration_since (100 samples, 0.87%)</title><rect x="2.4816%" y="533" width="0.8738%" height="15" fill="rgb(226,3,54)" fg:x="284" fg:w="100"/><text x="2.7316%" y="543.50"></text></g><g><title>std::time::Instant::checked_duration_since (100 samples, 0.87%)</title><rect x="2.4816%" y="517" width="0.8738%" height="15" fill="rgb(245,192,40)" fg:x="284" fg:w="100"/><text x="2.7316%" y="527.50"></text></g><g><title>std::sys::unix::time::inner::Instant::checked_sub_instant (100 samples, 0.87%)</title><rect x="2.4816%" y="501" width="0.8738%" height="15" fill="rgb(238,167,29)" fg:x="284" fg:w="100"/><text x="2.7316%" y="511.50"></text></g><g><title>__memcmp_avx2_movbe (5 samples, 0.04%)</title><rect x="3.3817%" y="549" width="0.0437%" height="15" fill="rgb(232,182,51)" fg:x="387" fg:w="5"/><text x="3.6317%" y="559.50"></text></g><g><title>_int_free (20 samples, 0.17%)</title><rect x="3.4254%" y="549" width="0.1748%" height="15" fill="rgb(231,60,39)" fg:x="392" fg:w="20"/><text x="3.6754%" y="559.50"></text></g><g><title>core::hash::BuildHasher::hash_one (19 samples, 0.17%)</title><rect x="3.6001%" y="549" width="0.1660%" height="15" fill="rgb(208,69,12)" fg:x="412" fg:w="19"/><text x="3.8501%" y="559.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (12 samples, 0.10%)</title><rect x="3.6613%" y="533" width="0.1049%" height="15" fill="rgb(235,93,37)" fg:x="419" fg:w="12"/><text x="3.9113%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (12 samples, 0.10%)</title><rect x="3.6613%" y="517" width="0.1049%" height="15" fill="rgb(213,116,39)" fg:x="419" fg:w="12"/><text x="3.9113%" y="527.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (12 samples, 0.10%)</title><rect x="3.6613%" y="501" width="0.1049%" height="15" fill="rgb(222,207,29)" fg:x="419" fg:w="12"/><text x="3.9113%" y="511.50"></text></g><g><title>core::hash::Hasher::write_u8 (7 samples, 0.06%)</title><rect x="3.7050%" y="485" width="0.0612%" height="15" fill="rgb(206,96,30)" fg:x="424" fg:w="7"/><text x="3.9550%" y="495.50"></text></g><g><title>hashbrown::map::make_hash (3 samples, 0.03%)</title><rect x="4.0633%" y="469" width="0.0262%" height="15" fill="rgb(218,138,4)" fg:x="465" fg:w="3"/><text x="4.3133%" y="479.50"></text></g><g><title>nand2tetris::vm::&lt;impl nand2tetris::hardware::RAM&gt;::get (40 samples, 0.35%)</title><rect x="3.7662%" y="549" width="0.3495%" height="15" fill="rgb(250,191,14)" fg:x="431" fg:w="40"/><text x="4.0162%" y="559.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (6 samples, 0.05%)</title><rect x="4.0633%" y="533" width="0.0524%" height="15" fill="rgb(239,60,40)" fg:x="465" fg:w="6"/><text x="4.3133%" y="543.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (6 samples, 0.05%)</title><rect x="4.0633%" y="517" width="0.0524%" height="15" fill="rgb(206,27,48)" fg:x="465" fg:w="6"/><text x="4.3133%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (6 samples, 0.05%)</title><rect x="4.0633%" y="501" width="0.0524%" height="15" fill="rgb(225,35,8)" fg:x="465" fg:w="6"/><text x="4.3133%" y="511.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (6 samples, 0.05%)</title><rect x="4.0633%" y="485" width="0.0524%" height="15" fill="rgb(250,213,24)" fg:x="465" fg:w="6"/><text x="4.3133%" y="495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (3 samples, 0.03%)</title><rect x="4.0895%" y="469" width="0.0262%" height="15" fill="rgb(247,123,22)" fg:x="468" fg:w="3"/><text x="4.3395%" y="479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (3 samples, 0.03%)</title><rect x="4.0895%" y="453" width="0.0262%" height="15" fill="rgb(231,138,38)" fg:x="468" fg:w="3"/><text x="4.3395%" y="463.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (3 samples, 0.03%)</title><rect x="4.0895%" y="437" width="0.0262%" height="15" fill="rgb(231,145,46)" fg:x="468" fg:w="3"/><text x="4.3395%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (3 samples, 0.03%)</title><rect x="4.0895%" y="421" width="0.0262%" height="15" fill="rgb(251,118,11)" fg:x="468" fg:w="3"/><text x="4.3395%" y="431.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (3 samples, 0.03%)</title><rect x="4.0895%" y="405" width="0.0262%" height="15" fill="rgb(217,147,25)" fg:x="468" fg:w="3"/><text x="4.3395%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (3 samples, 0.03%)</title><rect x="4.0895%" y="389" width="0.0262%" height="15" fill="rgb(247,81,37)" fg:x="468" fg:w="3"/><text x="4.3395%" y="399.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (3 samples, 0.03%)</title><rect x="4.0895%" y="373" width="0.0262%" height="15" fill="rgb(209,12,38)" fg:x="468" fg:w="3"/><text x="4.3395%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (3 samples, 0.03%)</title><rect x="4.0895%" y="357" width="0.0262%" height="15" fill="rgb(227,1,9)" fg:x="468" fg:w="3"/><text x="4.3395%" y="367.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (3 samples, 0.03%)</title><rect x="4.0895%" y="341" width="0.0262%" height="15" fill="rgb(248,47,43)" fg:x="468" fg:w="3"/><text x="4.3395%" y="351.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (3 samples, 0.03%)</title><rect x="4.0895%" y="325" width="0.0262%" height="15" fill="rgb(221,10,30)" fg:x="468" fg:w="3"/><text x="4.3395%" y="335.50"></text></g><g><title>nand2tetris::vm::&lt;impl nand2tetris::hardware::RAM&gt;::set (21 samples, 0.18%)</title><rect x="4.1157%" y="549" width="0.1835%" height="15" fill="rgb(210,229,1)" fg:x="471" fg:w="21"/><text x="4.3657%" y="559.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (96 samples, 0.84%)</title><rect x="4.2992%" y="549" width="0.8389%" height="15" fill="rgb(222,148,37)" fg:x="492" fg:w="96"/><text x="4.5492%" y="559.50"></text></g><g><title>[[stack]] (396 samples, 3.46%)</title><rect x="2.0710%" y="565" width="3.4603%" height="15" fill="rgb(234,67,33)" fg:x="237" fg:w="396"/><text x="2.3210%" y="575.50">[[s..</text></g><g><title>std::time::Instant::now (45 samples, 0.39%)</title><rect x="5.1381%" y="549" width="0.3932%" height="15" fill="rgb(247,98,35)" fg:x="588" fg:w="45"/><text x="5.3881%" y="559.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (45 samples, 0.39%)</title><rect x="5.1381%" y="533" width="0.3932%" height="15" fill="rgb(247,138,52)" fg:x="588" fg:w="45"/><text x="5.3881%" y="543.50"></text></g><g><title>std::sys::unix::time::inner::now (45 samples, 0.39%)</title><rect x="5.1381%" y="517" width="0.3932%" height="15" fill="rgb(213,79,30)" fg:x="588" fg:w="45"/><text x="5.3881%" y="527.50"></text></g><g><title>[libGLX_nvidia.so.470.103.01] (2 samples, 0.02%)</title><rect x="5.5400%" y="565" width="0.0175%" height="15" fill="rgb(246,177,23)" fg:x="634" fg:w="2"/><text x="5.7900%" y="575.50"></text></g><g><title>[libGLX_nvidia.so.470.103.01] (2 samples, 0.02%)</title><rect x="5.5400%" y="549" width="0.0175%" height="15" fill="rgb(230,62,27)" fg:x="634" fg:w="2"/><text x="5.7900%" y="559.50"></text></g><g><title>[libGLX_nvidia.so.470.103.01] (2 samples, 0.02%)</title><rect x="5.5400%" y="533" width="0.0175%" height="15" fill="rgb(216,154,8)" fg:x="634" fg:w="2"/><text x="5.7900%" y="543.50"></text></g><g><title>[libnvidia-glcore.so.470.103.01] (2 samples, 0.02%)</title><rect x="5.5400%" y="517" width="0.0175%" height="15" fill="rgb(244,35,45)" fg:x="634" fg:w="2"/><text x="5.7900%" y="527.50"></text></g><g><title>[libnvidia-glcore.so.470.103.01] (2 samples, 0.02%)</title><rect x="5.5400%" y="501" width="0.0175%" height="15" fill="rgb(251,115,12)" fg:x="634" fg:w="2"/><text x="5.7900%" y="511.50"></text></g><g><title>[libnvidia-glcore.so.470.103.01] (2 samples, 0.02%)</title><rect x="5.5400%" y="485" width="0.0175%" height="15" fill="rgb(240,54,50)" fg:x="634" fg:w="2"/><text x="5.7900%" y="495.50"></text></g><g><title>[libGLdispatch.so.0.0.0] (3 samples, 0.03%)</title><rect x="5.5575%" y="565" width="0.0262%" height="15" fill="rgb(233,84,52)" fg:x="636" fg:w="3"/><text x="5.8075%" y="575.50"></text></g><g><title>[nand2tetris] (3 samples, 0.03%)</title><rect x="5.5925%" y="565" width="0.0262%" height="15" fill="rgb(207,117,47)" fg:x="640" fg:w="3"/><text x="5.8425%" y="575.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.03%)</title><rect x="5.5925%" y="549" width="0.0262%" height="15" fill="rgb(249,43,39)" fg:x="640" fg:w="3"/><text x="5.8425%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (5 samples, 0.04%)</title><rect x="5.7235%" y="469" width="0.0437%" height="15" fill="rgb(209,38,44)" fg:x="655" fg:w="5"/><text x="5.9735%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (5 samples, 0.04%)</title><rect x="5.7235%" y="453" width="0.0437%" height="15" fill="rgb(236,212,23)" fg:x="655" fg:w="5"/><text x="5.9735%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (5 samples, 0.04%)</title><rect x="5.7235%" y="437" width="0.0437%" height="15" fill="rgb(242,79,21)" fg:x="655" fg:w="5"/><text x="5.9735%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (5 samples, 0.04%)</title><rect x="5.7235%" y="421" width="0.0437%" height="15" fill="rgb(211,96,35)" fg:x="655" fg:w="5"/><text x="5.9735%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5 samples, 0.04%)</title><rect x="5.7235%" y="405" width="0.0437%" height="15" fill="rgb(253,215,40)" fg:x="655" fg:w="5"/><text x="5.9735%" y="415.50"></text></g><g><title>alloc::alloc::alloc (5 samples, 0.04%)</title><rect x="5.7235%" y="389" width="0.0437%" height="15" fill="rgb(211,81,21)" fg:x="655" fg:w="5"/><text x="5.9735%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (13 samples, 0.11%)</title><rect x="5.6711%" y="549" width="0.1136%" height="15" fill="rgb(208,190,38)" fg:x="649" fg:w="13"/><text x="5.9211%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (7 samples, 0.06%)</title><rect x="5.7235%" y="533" width="0.0612%" height="15" fill="rgb(235,213,38)" fg:x="655" fg:w="7"/><text x="5.9735%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (7 samples, 0.06%)</title><rect x="5.7235%" y="517" width="0.0612%" height="15" fill="rgb(237,122,38)" fg:x="655" fg:w="7"/><text x="5.9735%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (7 samples, 0.06%)</title><rect x="5.7235%" y="501" width="0.0612%" height="15" fill="rgb(244,218,35)" fg:x="655" fg:w="7"/><text x="5.9735%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (7 samples, 0.06%)</title><rect x="5.7235%" y="485" width="0.0612%" height="15" fill="rgb(240,68,47)" fg:x="655" fg:w="7"/><text x="5.9735%" y="495.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (2 samples, 0.02%)</title><rect x="5.7672%" y="469" width="0.0175%" height="15" fill="rgb(210,16,53)" fg:x="660" fg:w="2"/><text x="6.0172%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.02%)</title><rect x="5.7672%" y="453" width="0.0175%" height="15" fill="rgb(235,124,12)" fg:x="660" fg:w="2"/><text x="6.0172%" y="463.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (48 samples, 0.42%)</title><rect x="5.7847%" y="549" width="0.4194%" height="15" fill="rgb(224,169,11)" fg:x="662" fg:w="48"/><text x="6.0347%" y="559.50"></text></g><g><title>&lt;std::time::Instant as core::ops::arith::Sub&gt;::sub (6 samples, 0.05%)</title><rect x="6.2041%" y="549" width="0.0524%" height="15" fill="rgb(250,166,2)" fg:x="710" fg:w="6"/><text x="6.4541%" y="559.50"></text></g><g><title>[libX11.so.6.3.0] (3 samples, 0.03%)</title><rect x="6.2653%" y="549" width="0.0262%" height="15" fill="rgb(242,216,29)" fg:x="717" fg:w="3"/><text x="6.5153%" y="559.50"></text></g><g><title>[libnvidia-glcore.so.470.103.01] (2 samples, 0.02%)</title><rect x="6.2915%" y="549" width="0.0175%" height="15" fill="rgb(230,116,27)" fg:x="720" fg:w="2"/><text x="6.5415%" y="559.50"></text></g><g><title>__GI___clock_gettime (132 samples, 1.15%)</title><rect x="6.3177%" y="549" width="1.1534%" height="15" fill="rgb(228,99,48)" fg:x="723" fg:w="132"/><text x="6.5677%" y="559.50"></text></g><g><title>__GI___libc_malloc (11 samples, 0.10%)</title><rect x="7.4799%" y="549" width="0.0961%" height="15" fill="rgb(253,11,6)" fg:x="856" fg:w="11"/><text x="7.7299%" y="559.50"></text></g><g><title>__memcmp_avx2_movbe (2 samples, 0.02%)</title><rect x="7.5760%" y="549" width="0.0175%" height="15" fill="rgb(247,143,39)" fg:x="867" fg:w="2"/><text x="7.8260%" y="559.50"></text></g><g><title>__vdso_clock_gettime (2 samples, 0.02%)</title><rect x="7.6022%" y="549" width="0.0175%" height="15" fill="rgb(236,97,10)" fg:x="870" fg:w="2"/><text x="7.8522%" y="559.50"></text></g><g><title>_int_free (13 samples, 0.11%)</title><rect x="7.6197%" y="549" width="0.1136%" height="15" fill="rgb(233,208,19)" fg:x="872" fg:w="13"/><text x="7.8697%" y="559.50"></text></g><g><title>core::hash::BuildHasher::hash_one (133 samples, 1.16%)</title><rect x="7.7333%" y="549" width="1.1622%" height="15" fill="rgb(216,164,2)" fg:x="885" fg:w="133"/><text x="7.9833%" y="559.50"></text></g><g><title>XFlush (2 samples, 0.02%)</title><rect x="12.7578%" y="437" width="0.0175%" height="15" fill="rgb(220,129,5)" fg:x="1460" fg:w="2"/><text x="13.0078%" y="447.50"></text></g><g><title>&lt;sdl2::event::EventPollIterator as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.04%)</title><rect x="12.7490%" y="517" width="0.0437%" height="15" fill="rgb(242,17,10)" fg:x="1459" fg:w="5"/><text x="12.9990%" y="527.50"></text></g><g><title>sdl2::event::poll_event (5 samples, 0.04%)</title><rect x="12.7490%" y="501" width="0.0437%" height="15" fill="rgb(242,107,0)" fg:x="1459" fg:w="5"/><text x="12.9990%" y="511.50"></text></g><g><title>[libSDL2-2.0.so.0.10.0] (5 samples, 0.04%)</title><rect x="12.7490%" y="485" width="0.0437%" height="15" fill="rgb(251,28,31)" fg:x="1459" fg:w="5"/><text x="12.9990%" y="495.50"></text></g><g><title>[libSDL2-2.0.so.0.10.0] (5 samples, 0.04%)</title><rect x="12.7490%" y="469" width="0.0437%" height="15" fill="rgb(233,223,10)" fg:x="1459" fg:w="5"/><text x="12.9990%" y="479.50"></text></g><g><title>[libSDL2-2.0.so.0.10.0] (5 samples, 0.04%)</title><rect x="12.7490%" y="453" width="0.0437%" height="15" fill="rgb(215,21,27)" fg:x="1459" fg:w="5"/><text x="12.9990%" y="463.50"></text></g><g><title>[libSDL2-2.0.so.0.10.0] (2 samples, 0.02%)</title><rect x="12.7753%" y="437" width="0.0175%" height="15" fill="rgb(232,23,21)" fg:x="1462" fg:w="2"/><text x="13.0253%" y="447.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::ok (283 samples, 2.47%)</title><rect x="14.1472%" y="453" width="2.4729%" height="15" fill="rgb(244,5,23)" fg:x="1619" fg:w="283"/><text x="14.3972%" y="463.50">co..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (519 samples, 4.54%)</title><rect x="19.3901%" y="437" width="4.5351%" height="15" fill="rgb(226,81,46)" fg:x="2219" fg:w="519"/><text x="19.6401%" y="447.50">core:..</text></g><g><title>core::cmp::PartialOrd::ge (519 samples, 4.54%)</title><rect x="19.3901%" y="421" width="4.5351%" height="15" fill="rgb(247,70,30)" fg:x="2219" fg:w="519"/><text x="19.6401%" y="431.50">core:..</text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (495 samples, 4.33%)</title><rect x="19.5998%" y="405" width="4.3254%" height="15" fill="rgb(212,68,19)" fg:x="2243" fg:w="495"/><text x="19.8498%" y="415.50">&lt;std:..</text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::Ord&gt;::cmp (495 samples, 4.33%)</title><rect x="19.5998%" y="389" width="4.3254%" height="15" fill="rgb(240,187,13)" fg:x="2243" fg:w="495"/><text x="19.8498%" y="399.50">&lt;std:..</text></g><g><title>core::tuple::&lt;impl core::cmp::Ord for (A,B)&gt;::cmp (495 samples, 4.33%)</title><rect x="19.5998%" y="373" width="4.3254%" height="15" fill="rgb(223,113,26)" fg:x="2243" fg:w="495"/><text x="19.8498%" y="383.50">core:..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (223 samples, 1.95%)</title><rect x="21.9766%" y="357" width="1.9486%" height="15" fill="rgb(206,192,2)" fg:x="2515" fg:w="223"/><text x="22.2266%" y="367.50">c..</text></g><g><title>&lt;std::time::Instant as core::ops::arith::Sub&gt;::sub (1,480 samples, 12.93%)</title><rect x="12.7927%" y="517" width="12.9325%" height="15" fill="rgb(241,108,4)" fg:x="1464" fg:w="1480"/><text x="13.0427%" y="527.50">&lt;std::time::Instant..</text></g><g><title>std::time::Instant::duration_since (1,325 samples, 11.58%)</title><rect x="14.1472%" y="501" width="11.5781%" height="15" fill="rgb(247,173,49)" fg:x="1619" fg:w="1325"/><text x="14.3972%" y="511.50">std::time::Instan..</text></g><g><title>std::time::Instant::checked_duration_since (1,325 samples, 11.58%)</title><rect x="14.1472%" y="485" width="11.5781%" height="15" fill="rgb(224,114,35)" fg:x="1619" fg:w="1325"/><text x="14.3972%" y="495.50">std::time::Instan..</text></g><g><title>std::sys::unix::time::inner::Instant::checked_sub_instant (1,325 samples, 11.58%)</title><rect x="14.1472%" y="469" width="11.5781%" height="15" fill="rgb(245,159,27)" fg:x="1619" fg:w="1325"/><text x="14.3972%" y="479.50">std::sys::unix::t..</text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (1,042 samples, 9.11%)</title><rect x="16.6201%" y="453" width="9.1052%" height="15" fill="rgb(245,172,44)" fg:x="1902" fg:w="1042"/><text x="16.8701%" y="463.50">std::sys::uni..</text></g><g><title>core::time::Duration::new (206 samples, 1.80%)</title><rect x="23.9252%" y="437" width="1.8001%" height="15" fill="rgb(236,23,11)" fg:x="2738" fg:w="206"/><text x="24.1752%" y="447.50">c..</text></g><g><title>core::num::&lt;impl u64&gt;::checked_add (175 samples, 1.53%)</title><rect x="24.1961%" y="421" width="1.5292%" height="15" fill="rgb(205,117,38)" fg:x="2769" fg:w="175"/><text x="24.4461%" y="431.50"></text></g><g><title>core::num::&lt;impl u64&gt;::overflowing_add (175 samples, 1.53%)</title><rect x="24.1961%" y="405" width="1.5292%" height="15" fill="rgb(237,72,25)" fg:x="2769" fg:w="175"/><text x="24.4461%" y="415.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="25.7253%" y="517" width="0.0175%" height="15" fill="rgb(244,70,9)" fg:x="2944" fg:w="2"/><text x="25.9753%" y="527.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (4 samples, 0.03%)</title><rect x="25.7515%" y="517" width="0.0350%" height="15" fill="rgb(217,125,39)" fg:x="2947" fg:w="4"/><text x="26.0015%" y="527.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (4 samples, 0.03%)</title><rect x="25.7515%" y="501" width="0.0350%" height="15" fill="rgb(235,36,10)" fg:x="2947" fg:w="4"/><text x="26.0015%" y="511.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u16&gt;::lt (2 samples, 0.02%)</title><rect x="25.7690%" y="485" width="0.0175%" height="15" fill="rgb(251,123,47)" fg:x="2949" fg:w="2"/><text x="26.0190%" y="495.50"></text></g><g><title>core::time::Duration::as_secs_f64 (245 samples, 2.14%)</title><rect x="25.7864%" y="517" width="2.1409%" height="15" fill="rgb(221,13,13)" fg:x="2951" fg:w="245"/><text x="26.0364%" y="527.50">c..</text></g><g><title>[unknown] (4 samples, 0.03%)</title><rect x="27.8923%" y="501" width="0.0350%" height="15" fill="rgb(238,131,9)" fg:x="3192" fg:w="4"/><text x="28.1423%" y="511.50"></text></g><g><title>checked_request2size (13 samples, 0.11%)</title><rect x="28.5914%" y="309" width="0.1136%" height="15" fill="rgb(211,50,8)" fg:x="3272" fg:w="13"/><text x="28.8414%" y="319.50"></text></g><g><title>__GI___libc_malloc (48 samples, 0.42%)</title><rect x="28.3992%" y="325" width="0.4194%" height="15" fill="rgb(245,182,24)" fg:x="3250" fg:w="48"/><text x="28.6492%" y="335.50"></text></g><g><title>tcache_get (13 samples, 0.11%)</title><rect x="28.7050%" y="309" width="0.1136%" height="15" fill="rgb(242,14,37)" fg:x="3285" fg:w="13"/><text x="28.9550%" y="319.50"></text></g><g><title>__rdl_alloc (12 samples, 0.10%)</title><rect x="28.8186%" y="325" width="0.1049%" height="15" fill="rgb(246,228,12)" fg:x="3298" fg:w="12"/><text x="29.0686%" y="335.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (12 samples, 0.10%)</title><rect x="28.8186%" y="309" width="0.1049%" height="15" fill="rgb(213,55,15)" fg:x="3298" fg:w="12"/><text x="29.0686%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (82 samples, 0.72%)</title><rect x="28.2593%" y="421" width="0.7165%" height="15" fill="rgb(209,9,3)" fg:x="3234" fg:w="82"/><text x="28.5093%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (82 samples, 0.72%)</title><rect x="28.2593%" y="405" width="0.7165%" height="15" fill="rgb(230,59,30)" fg:x="3234" fg:w="82"/><text x="28.5093%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (82 samples, 0.72%)</title><rect x="28.2593%" y="389" width="0.7165%" height="15" fill="rgb(209,121,21)" fg:x="3234" fg:w="82"/><text x="28.5093%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (71 samples, 0.62%)</title><rect x="28.3555%" y="373" width="0.6204%" height="15" fill="rgb(220,109,13)" fg:x="3245" fg:w="71"/><text x="28.6055%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (71 samples, 0.62%)</title><rect x="28.3555%" y="357" width="0.6204%" height="15" fill="rgb(232,18,1)" fg:x="3245" fg:w="71"/><text x="28.6055%" y="367.50"></text></g><g><title>alloc::alloc::alloc (71 samples, 0.62%)</title><rect x="28.3555%" y="341" width="0.6204%" height="15" fill="rgb(215,41,42)" fg:x="3245" fg:w="71"/><text x="28.6055%" y="351.50"></text></g><g><title>__rust_alloc (6 samples, 0.05%)</title><rect x="28.9235%" y="325" width="0.0524%" height="15" fill="rgb(224,123,36)" fg:x="3310" fg:w="6"/><text x="29.1735%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (110 samples, 0.96%)</title><rect x="28.1894%" y="501" width="0.9612%" height="15" fill="rgb(240,125,3)" fg:x="3226" fg:w="110"/><text x="28.4394%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (102 samples, 0.89%)</title><rect x="28.2593%" y="485" width="0.8913%" height="15" fill="rgb(205,98,50)" fg:x="3234" fg:w="102"/><text x="28.5093%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (102 samples, 0.89%)</title><rect x="28.2593%" y="469" width="0.8913%" height="15" fill="rgb(205,185,37)" fg:x="3234" fg:w="102"/><text x="28.5093%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (102 samples, 0.89%)</title><rect x="28.2593%" y="453" width="0.8913%" height="15" fill="rgb(238,207,15)" fg:x="3234" fg:w="102"/><text x="28.5093%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (102 samples, 0.89%)</title><rect x="28.2593%" y="437" width="0.8913%" height="15" fill="rgb(213,199,42)" fg:x="3234" fg:w="102"/><text x="28.5093%" y="447.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (20 samples, 0.17%)</title><rect x="28.9759%" y="421" width="0.1748%" height="15" fill="rgb(235,201,11)" fg:x="3316" fg:w="20"/><text x="29.2259%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (20 samples, 0.17%)</title><rect x="28.9759%" y="405" width="0.1748%" height="15" fill="rgb(207,46,11)" fg:x="3316" fg:w="20"/><text x="29.2259%" y="415.50"></text></g><g><title>__memmove_avx_unaligned_erms (19 samples, 0.17%)</title><rect x="28.9846%" y="389" width="0.1660%" height="15" fill="rgb(241,35,35)" fg:x="3317" fg:w="19"/><text x="29.2346%" y="399.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (4 samples, 0.03%)</title><rect x="29.5177%" y="341" width="0.0350%" height="15" fill="rgb(243,32,47)" fg:x="3378" fg:w="4"/><text x="29.7677%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (20 samples, 0.17%)</title><rect x="29.4303%" y="357" width="0.1748%" height="15" fill="rgb(247,202,23)" fg:x="3368" fg:w="20"/><text x="29.6803%" y="367.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (6 samples, 0.05%)</title><rect x="29.5526%" y="341" width="0.0524%" height="15" fill="rgb(219,102,11)" fg:x="3382" fg:w="6"/><text x="29.8026%" y="351.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (34 samples, 0.30%)</title><rect x="29.8934%" y="341" width="0.2971%" height="15" fill="rgb(243,110,44)" fg:x="3421" fg:w="34"/><text x="30.1434%" y="351.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (133 samples, 1.16%)</title><rect x="29.2642%" y="405" width="1.1622%" height="15" fill="rgb(222,74,54)" fg:x="3349" fg:w="133"/><text x="29.5142%" y="415.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (133 samples, 1.16%)</title><rect x="29.2642%" y="389" width="1.1622%" height="15" fill="rgb(216,99,12)" fg:x="3349" fg:w="133"/><text x="29.5142%" y="399.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (133 samples, 1.16%)</title><rect x="29.2642%" y="373" width="1.1622%" height="15" fill="rgb(226,22,26)" fg:x="3349" fg:w="133"/><text x="29.5142%" y="383.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (94 samples, 0.82%)</title><rect x="29.6050%" y="357" width="0.8214%" height="15" fill="rgb(217,163,10)" fg:x="3388" fg:w="94"/><text x="29.8550%" y="367.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (27 samples, 0.24%)</title><rect x="30.1905%" y="341" width="0.2359%" height="15" fill="rgb(213,25,53)" fg:x="3455" fg:w="27"/><text x="30.4405%" y="351.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (31 samples, 0.27%)</title><rect x="30.4264%" y="405" width="0.2709%" height="15" fill="rgb(252,105,26)" fg:x="3482" fg:w="31"/><text x="30.6764%" y="415.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (15 samples, 0.13%)</title><rect x="30.5662%" y="389" width="0.1311%" height="15" fill="rgb(220,39,43)" fg:x="3498" fg:w="15"/><text x="30.8162%" y="399.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (11 samples, 0.10%)</title><rect x="30.6012%" y="373" width="0.0961%" height="15" fill="rgb(229,68,48)" fg:x="3502" fg:w="11"/><text x="30.8512%" y="383.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (11 samples, 0.10%)</title><rect x="30.6012%" y="357" width="0.0961%" height="15" fill="rgb(252,8,32)" fg:x="3502" fg:w="11"/><text x="30.8512%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (4 samples, 0.03%)</title><rect x="30.6973%" y="373" width="0.0350%" height="15" fill="rgb(223,20,43)" fg:x="3513" fg:w="4"/><text x="30.9473%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (4 samples, 0.03%)</title><rect x="30.6973%" y="357" width="0.0350%" height="15" fill="rgb(229,81,49)" fg:x="3513" fg:w="4"/><text x="30.9473%" y="367.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (43 samples, 0.38%)</title><rect x="30.7410%" y="357" width="0.3757%" height="15" fill="rgb(236,28,36)" fg:x="3518" fg:w="43"/><text x="30.9910%" y="367.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (43 samples, 0.38%)</title><rect x="30.7410%" y="341" width="0.3757%" height="15" fill="rgb(249,185,26)" fg:x="3518" fg:w="43"/><text x="30.9910%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (43 samples, 0.38%)</title><rect x="30.7410%" y="325" width="0.3757%" height="15" fill="rgb(249,174,33)" fg:x="3518" fg:w="43"/><text x="30.9910%" y="335.50"></text></g><g><title>core::hash::sip::u8to64_le (31 samples, 0.27%)</title><rect x="30.8459%" y="309" width="0.2709%" height="15" fill="rgb(233,201,37)" fg:x="3530" fg:w="31"/><text x="31.0959%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (6 samples, 0.05%)</title><rect x="31.0643%" y="293" width="0.0524%" height="15" fill="rgb(221,78,26)" fg:x="3555" fg:w="6"/><text x="31.3143%" y="303.50"></text></g><g><title>core::cmp::min (6 samples, 0.05%)</title><rect x="31.3527%" y="293" width="0.0524%" height="15" fill="rgb(250,127,30)" fg:x="3588" fg:w="6"/><text x="31.6027%" y="303.50"></text></g><g><title>core::cmp::Ord::min (6 samples, 0.05%)</title><rect x="31.3527%" y="277" width="0.0524%" height="15" fill="rgb(230,49,44)" fg:x="3588" fg:w="6"/><text x="31.6027%" y="287.50"></text></g><g><title>core::cmp::min_by (6 samples, 0.05%)</title><rect x="31.3527%" y="261" width="0.0524%" height="15" fill="rgb(229,67,23)" fg:x="3588" fg:w="6"/><text x="31.6027%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (91 samples, 0.80%)</title><rect x="30.6973%" y="389" width="0.7952%" height="15" fill="rgb(249,83,47)" fg:x="3513" fg:w="91"/><text x="30.9473%" y="399.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (87 samples, 0.76%)</title><rect x="30.7323%" y="373" width="0.7602%" height="15" fill="rgb(215,43,3)" fg:x="3517" fg:w="87"/><text x="30.9823%" y="383.50"></text></g><g><title>core::hash::Hasher::write_u8 (43 samples, 0.38%)</title><rect x="31.1167%" y="357" width="0.3757%" height="15" fill="rgb(238,154,13)" fg:x="3561" fg:w="43"/><text x="31.3667%" y="367.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (33 samples, 0.29%)</title><rect x="31.2041%" y="341" width="0.2884%" height="15" fill="rgb(219,56,2)" fg:x="3571" fg:w="33"/><text x="31.4541%" y="351.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (33 samples, 0.29%)</title><rect x="31.2041%" y="325" width="0.2884%" height="15" fill="rgb(233,0,4)" fg:x="3571" fg:w="33"/><text x="31.4541%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (33 samples, 0.29%)</title><rect x="31.2041%" y="309" width="0.2884%" height="15" fill="rgb(235,30,7)" fg:x="3571" fg:w="33"/><text x="31.4541%" y="319.50"></text></g><g><title>core::hash::sip::u8to64_le (10 samples, 0.09%)</title><rect x="31.4051%" y="293" width="0.0874%" height="15" fill="rgb(250,79,13)" fg:x="3594" fg:w="10"/><text x="31.6551%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (8 samples, 0.07%)</title><rect x="31.4925%" y="357" width="0.0699%" height="15" fill="rgb(211,146,34)" fg:x="3604" fg:w="8"/><text x="31.7425%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (8 samples, 0.07%)</title><rect x="31.4925%" y="341" width="0.0699%" height="15" fill="rgb(228,22,38)" fg:x="3604" fg:w="8"/><text x="31.7425%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (2 samples, 0.02%)</title><rect x="31.5449%" y="325" width="0.0175%" height="15" fill="rgb(235,168,5)" fg:x="3610" fg:w="2"/><text x="31.7949%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (15 samples, 0.13%)</title><rect x="31.9381%" y="277" width="0.1311%" height="15" fill="rgb(221,155,16)" fg:x="3655" fg:w="15"/><text x="32.1881%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (34 samples, 0.30%)</title><rect x="31.8682%" y="293" width="0.2971%" height="15" fill="rgb(215,215,53)" fg:x="3647" fg:w="34"/><text x="32.1182%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (11 samples, 0.10%)</title><rect x="32.0692%" y="277" width="0.0961%" height="15" fill="rgb(223,4,10)" fg:x="3670" fg:w="11"/><text x="32.3192%" y="287.50"></text></g><g><title>core::cmp::min (3 samples, 0.03%)</title><rect x="32.1653%" y="293" width="0.0262%" height="15" fill="rgb(234,103,6)" fg:x="3681" fg:w="3"/><text x="32.4153%" y="303.50"></text></g><g><title>core::cmp::Ord::min (3 samples, 0.03%)</title><rect x="32.1653%" y="277" width="0.0262%" height="15" fill="rgb(227,97,0)" fg:x="3681" fg:w="3"/><text x="32.4153%" y="287.50"></text></g><g><title>core::cmp::min_by (3 samples, 0.03%)</title><rect x="32.1653%" y="261" width="0.0262%" height="15" fill="rgb(234,150,53)" fg:x="3681" fg:w="3"/><text x="32.4153%" y="271.50"></text></g><g><title>core::hash::sip::u8to64_le (33 samples, 0.29%)</title><rect x="32.1915%" y="293" width="0.2884%" height="15" fill="rgb(228,201,54)" fg:x="3684" fg:w="33"/><text x="32.4415%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.03%)</title><rect x="32.4449%" y="277" width="0.0350%" height="15" fill="rgb(222,22,37)" fg:x="3713" fg:w="4"/><text x="32.6949%" y="287.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (113 samples, 0.99%)</title><rect x="31.5624%" y="341" width="0.9874%" height="15" fill="rgb(237,53,32)" fg:x="3612" fg:w="113"/><text x="31.8124%" y="351.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (112 samples, 0.98%)</title><rect x="31.5711%" y="325" width="0.9787%" height="15" fill="rgb(233,25,53)" fg:x="3613" fg:w="112"/><text x="31.8211%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (112 samples, 0.98%)</title><rect x="31.5711%" y="309" width="0.9787%" height="15" fill="rgb(210,40,34)" fg:x="3613" fg:w="112"/><text x="31.8211%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (8 samples, 0.07%)</title><rect x="32.4799%" y="293" width="0.0699%" height="15" fill="rgb(241,220,44)" fg:x="3717" fg:w="8"/><text x="32.7299%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.02%)</title><rect x="32.7770%" y="277" width="0.0175%" height="15" fill="rgb(235,28,35)" fg:x="3751" fg:w="2"/><text x="33.0270%" y="287.50"></text></g><g><title>core::cmp::min (8 samples, 0.07%)</title><rect x="32.8032%" y="277" width="0.0699%" height="15" fill="rgb(210,56,17)" fg:x="3754" fg:w="8"/><text x="33.0532%" y="287.50"></text></g><g><title>core::cmp::Ord::min (8 samples, 0.07%)</title><rect x="32.8032%" y="261" width="0.0699%" height="15" fill="rgb(224,130,29)" fg:x="3754" fg:w="8"/><text x="33.0532%" y="271.50"></text></g><g><title>core::cmp::min_by (8 samples, 0.07%)</title><rect x="32.8032%" y="245" width="0.0699%" height="15" fill="rgb(235,212,8)" fg:x="3754" fg:w="8"/><text x="33.0532%" y="255.50"></text></g><g><title>hashbrown::map::make_hash (438 samples, 3.83%)</title><rect x="29.2468%" y="437" width="3.8273%" height="15" fill="rgb(223,33,50)" fg:x="3347" fg:w="438"/><text x="29.4968%" y="447.50">hash..</text></g><g><title>core::hash::BuildHasher::hash_one (438 samples, 3.83%)</title><rect x="29.2468%" y="421" width="3.8273%" height="15" fill="rgb(219,149,13)" fg:x="3347" fg:w="438"/><text x="29.4968%" y="431.50">core..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (272 samples, 2.38%)</title><rect x="30.6973%" y="405" width="2.3768%" height="15" fill="rgb(250,156,29)" fg:x="3513" fg:w="272"/><text x="30.9473%" y="415.50">co..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for (A,B)&gt;::hash (181 samples, 1.58%)</title><rect x="31.4925%" y="389" width="1.5816%" height="15" fill="rgb(216,193,19)" fg:x="3604" fg:w="181"/><text x="31.7425%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (181 samples, 1.58%)</title><rect x="31.4925%" y="373" width="1.5816%" height="15" fill="rgb(216,135,14)" fg:x="3604" fg:w="181"/><text x="31.7425%" y="383.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (173 samples, 1.51%)</title><rect x="31.5624%" y="357" width="1.5117%" height="15" fill="rgb(241,47,5)" fg:x="3612" fg:w="173"/><text x="31.8124%" y="367.50"></text></g><g><title>core::hash::Hasher::write_u8 (60 samples, 0.52%)</title><rect x="32.5498%" y="341" width="0.5243%" height="15" fill="rgb(233,42,35)" fg:x="3725" fg:w="60"/><text x="32.7998%" y="351.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (55 samples, 0.48%)</title><rect x="32.5935%" y="325" width="0.4806%" height="15" fill="rgb(231,13,6)" fg:x="3730" fg:w="55"/><text x="32.8435%" y="335.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (54 samples, 0.47%)</title><rect x="32.6022%" y="309" width="0.4719%" height="15" fill="rgb(207,181,40)" fg:x="3731" fg:w="54"/><text x="32.8522%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (54 samples, 0.47%)</title><rect x="32.6022%" y="293" width="0.4719%" height="15" fill="rgb(254,173,49)" fg:x="3731" fg:w="54"/><text x="32.8522%" y="303.50"></text></g><g><title>core::hash::sip::u8to64_le (23 samples, 0.20%)</title><rect x="32.8731%" y="277" width="0.2010%" height="15" fill="rgb(221,1,38)" fg:x="3762" fg:w="23"/><text x="33.1231%" y="287.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.10%)</title><rect x="33.2052%" y="389" width="0.0961%" height="15" fill="rgb(206,124,46)" fg:x="3800" fg:w="11"/><text x="33.4552%" y="399.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (11 samples, 0.10%)</title><rect x="33.2052%" y="373" width="0.0961%" height="15" fill="rgb(249,21,11)" fg:x="3800" fg:w="11"/><text x="33.4552%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::ops::index::Index&lt;core::ops::range::RangeFull&gt;&gt;::index (3 samples, 0.03%)</title><rect x="33.3100%" y="341" width="0.0262%" height="15" fill="rgb(222,201,40)" fg:x="3812" fg:w="3"/><text x="33.5600%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.03%)</title><rect x="33.3100%" y="325" width="0.0262%" height="15" fill="rgb(235,61,29)" fg:x="3812" fg:w="3"/><text x="33.5600%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (44 samples, 0.38%)</title><rect x="33.3100%" y="357" width="0.3845%" height="15" fill="rgb(219,207,3)" fg:x="3812" fg:w="44"/><text x="33.5600%" y="367.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (41 samples, 0.36%)</title><rect x="33.3362%" y="341" width="0.3583%" height="15" fill="rgb(222,56,46)" fg:x="3815" fg:w="41"/><text x="33.5862%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (41 samples, 0.36%)</title><rect x="33.3362%" y="325" width="0.3583%" height="15" fill="rgb(239,76,54)" fg:x="3815" fg:w="41"/><text x="33.5862%" y="335.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (41 samples, 0.36%)</title><rect x="33.3362%" y="309" width="0.3583%" height="15" fill="rgb(231,124,27)" fg:x="3815" fg:w="41"/><text x="33.5862%" y="319.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (41 samples, 0.36%)</title><rect x="33.3362%" y="293" width="0.3583%" height="15" fill="rgb(249,195,6)" fg:x="3815" fg:w="41"/><text x="33.5862%" y="303.50"></text></g><g><title>__memcmp_avx2_movbe (35 samples, 0.31%)</title><rect x="33.3887%" y="277" width="0.3058%" height="15" fill="rgb(237,174,47)" fg:x="3821" fg:w="35"/><text x="33.6387%" y="287.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (124 samples, 1.08%)</title><rect x="33.3100%" y="373" width="1.0835%" height="15" fill="rgb(206,201,31)" fg:x="3812" fg:w="124"/><text x="33.5600%" y="383.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialEq for (A,B)&gt;::eq (80 samples, 0.70%)</title><rect x="33.6945%" y="357" width="0.6991%" height="15" fill="rgb(231,57,52)" fg:x="3856" fg:w="80"/><text x="33.9445%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (79 samples, 0.69%)</title><rect x="33.7033%" y="341" width="0.6903%" height="15" fill="rgb(248,177,22)" fg:x="3857" fg:w="79"/><text x="33.9533%" y="351.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (78 samples, 0.68%)</title><rect x="33.7120%" y="325" width="0.6816%" height="15" fill="rgb(215,211,37)" fg:x="3858" fg:w="78"/><text x="33.9620%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (78 samples, 0.68%)</title><rect x="33.7120%" y="309" width="0.6816%" height="15" fill="rgb(241,128,51)" fg:x="3858" fg:w="78"/><text x="33.9620%" y="319.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (78 samples, 0.68%)</title><rect x="33.7120%" y="293" width="0.6816%" height="15" fill="rgb(227,165,31)" fg:x="3858" fg:w="78"/><text x="33.9620%" y="303.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (78 samples, 0.68%)</title><rect x="33.7120%" y="277" width="0.6816%" height="15" fill="rgb(228,167,24)" fg:x="3858" fg:w="78"/><text x="33.9620%" y="287.50"></text></g><g><title>__memcmp_avx2_movbe (69 samples, 0.60%)</title><rect x="33.7906%" y="261" width="0.6029%" height="15" fill="rgb(228,143,12)" fg:x="3867" fg:w="69"/><text x="34.0406%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (130 samples, 1.14%)</title><rect x="33.3100%" y="389" width="1.1360%" height="15" fill="rgb(249,149,8)" fg:x="3812" fg:w="130"/><text x="33.5600%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (6 samples, 0.05%)</title><rect x="34.3936%" y="373" width="0.0524%" height="15" fill="rgb(243,35,44)" fg:x="3936" fg:w="6"/><text x="34.6436%" y="383.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (6 samples, 0.05%)</title><rect x="34.3936%" y="357" width="0.0524%" height="15" fill="rgb(246,89,9)" fg:x="3936" fg:w="6"/><text x="34.6436%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (6 samples, 0.05%)</title><rect x="34.3936%" y="341" width="0.0524%" height="15" fill="rgb(233,213,13)" fg:x="3936" fg:w="6"/><text x="34.6436%" y="351.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_neg (6 samples, 0.05%)</title><rect x="34.3936%" y="325" width="0.0524%" height="15" fill="rgb(233,141,41)" fg:x="3936" fg:w="6"/><text x="34.6436%" y="335.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_sub (6 samples, 0.05%)</title><rect x="34.3936%" y="309" width="0.0524%" height="15" fill="rgb(239,167,4)" fg:x="3936" fg:w="6"/><text x="34.6436%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::probe_seq (4 samples, 0.03%)</title><rect x="34.4460%" y="389" width="0.0350%" height="15" fill="rgb(209,217,16)" fg:x="3942" fg:w="4"/><text x="34.6960%" y="399.50"></text></g><g><title>hashbrown::raw::h2 (22 samples, 0.19%)</title><rect x="34.4810%" y="389" width="0.1922%" height="15" fill="rgb(219,88,35)" fg:x="3946" fg:w="22"/><text x="34.7310%" y="399.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (11 samples, 0.10%)</title><rect x="34.6732%" y="389" width="0.0961%" height="15" fill="rgb(220,193,23)" fg:x="3968" fg:w="11"/><text x="34.9232%" y="399.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (11 samples, 0.10%)</title><rect x="34.6732%" y="373" width="0.0961%" height="15" fill="rgb(230,90,52)" fg:x="3968" fg:w="11"/><text x="34.9232%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (11 samples, 0.10%)</title><rect x="34.6732%" y="357" width="0.0961%" height="15" fill="rgb(252,106,19)" fg:x="3968" fg:w="11"/><text x="34.9232%" y="367.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (647 samples, 5.65%)</title><rect x="29.1594%" y="501" width="5.6536%" height="15" fill="rgb(206,74,20)" fg:x="3337" fg:w="647"/><text x="29.4094%" y="511.50">&lt;std::c..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (647 samples, 5.65%)</title><rect x="29.1594%" y="485" width="5.6536%" height="15" fill="rgb(230,138,44)" fg:x="3337" fg:w="647"/><text x="29.4094%" y="495.50">std::co..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (647 samples, 5.65%)</title><rect x="29.1594%" y="469" width="5.6536%" height="15" fill="rgb(235,182,43)" fg:x="3337" fg:w="647"/><text x="29.4094%" y="479.50">hashbro..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (647 samples, 5.65%)</title><rect x="29.1594%" y="453" width="5.6536%" height="15" fill="rgb(242,16,51)" fg:x="3337" fg:w="647"/><text x="29.4094%" y="463.50">hashbro..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (199 samples, 1.74%)</title><rect x="33.0741%" y="437" width="1.7389%" height="15" fill="rgb(248,9,4)" fg:x="3785" fg:w="199"/><text x="33.3241%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (199 samples, 1.74%)</title><rect x="33.0741%" y="421" width="1.7389%" height="15" fill="rgb(210,31,22)" fg:x="3785" fg:w="199"/><text x="33.3241%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (199 samples, 1.74%)</title><rect x="33.0741%" y="405" width="1.7389%" height="15" fill="rgb(239,54,39)" fg:x="3785" fg:w="199"/><text x="33.3241%" y="415.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (5 samples, 0.04%)</title><rect x="34.7693%" y="389" width="0.0437%" height="15" fill="rgb(230,99,41)" fg:x="3979" fg:w="5"/><text x="35.0193%" y="399.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (5 samples, 0.04%)</title><rect x="34.7693%" y="373" width="0.0437%" height="15" fill="rgb(253,106,12)" fg:x="3979" fg:w="5"/><text x="35.0193%" y="383.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="34.8130%" y="501" width="0.0175%" height="15" fill="rgb(213,46,41)" fg:x="3984" fg:w="2"/><text x="35.0630%" y="511.50"></text></g><g><title>__GI___libc_free (20 samples, 0.17%)</title><rect x="34.8742%" y="389" width="0.1748%" height="15" fill="rgb(215,133,35)" fg:x="3991" fg:w="20"/><text x="35.1242%" y="399.50"></text></g><g><title>__rdl_dealloc (3 samples, 0.03%)</title><rect x="35.0489%" y="389" width="0.0262%" height="15" fill="rgb(213,28,5)" fg:x="4011" fg:w="3"/><text x="35.2989%" y="399.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (3 samples, 0.03%)</title><rect x="35.0489%" y="373" width="0.0262%" height="15" fill="rgb(215,77,49)" fg:x="4011" fg:w="3"/><text x="35.2989%" y="383.50"></text></g><g><title>__rust_dealloc (8 samples, 0.07%)</title><rect x="35.0751%" y="389" width="0.0699%" height="15" fill="rgb(248,100,22)" fg:x="4014" fg:w="8"/><text x="35.3251%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (78 samples, 0.68%)</title><rect x="34.8742%" y="421" width="0.6816%" height="15" fill="rgb(208,67,9)" fg:x="3991" fg:w="78"/><text x="35.1242%" y="431.50"></text></g><g><title>alloc::alloc::dealloc (78 samples, 0.68%)</title><rect x="34.8742%" y="405" width="0.6816%" height="15" fill="rgb(219,133,21)" fg:x="3991" fg:w="78"/><text x="35.1242%" y="415.50"></text></g><g><title>_int_free (47 samples, 0.41%)</title><rect x="35.1451%" y="389" width="0.4107%" height="15" fill="rgb(246,46,29)" fg:x="4022" fg:w="47"/><text x="35.3951%" y="399.50"></text></g><g><title>tcache_put (13 samples, 0.11%)</title><rect x="35.4422%" y="373" width="0.1136%" height="15" fill="rgb(246,185,52)" fg:x="4056" fg:w="13"/><text x="35.6922%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,alloc::string::String)&gt; (84 samples, 0.73%)</title><rect x="34.8305%" y="501" width="0.7340%" height="15" fill="rgb(252,136,11)" fg:x="3986" fg:w="84"/><text x="35.0805%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (84 samples, 0.73%)</title><rect x="34.8305%" y="485" width="0.7340%" height="15" fill="rgb(219,138,53)" fg:x="3986" fg:w="84"/><text x="35.0805%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (84 samples, 0.73%)</title><rect x="34.8305%" y="469" width="0.7340%" height="15" fill="rgb(211,51,23)" fg:x="3986" fg:w="84"/><text x="35.0805%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (84 samples, 0.73%)</title><rect x="34.8305%" y="453" width="0.7340%" height="15" fill="rgb(247,221,28)" fg:x="3986" fg:w="84"/><text x="35.0805%" y="463.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (84 samples, 0.73%)</title><rect x="34.8305%" y="437" width="0.7340%" height="15" fill="rgb(251,222,45)" fg:x="3986" fg:w="84"/><text x="35.0805%" y="447.50"></text></g><g><title>nand2tetris::vm::VM::goto (878 samples, 7.67%)</title><rect x="27.9360%" y="517" width="7.6721%" height="15" fill="rgb(217,162,53)" fg:x="3197" fg:w="878"/><text x="28.1860%" y="527.50">nand2tetris..</text></g><g><title>core::slice::&lt;impl [T]&gt;::last (5 samples, 0.04%)</title><rect x="35.5645%" y="501" width="0.0437%" height="15" fill="rgb(229,93,14)" fg:x="4070" fg:w="5"/><text x="35.8145%" y="511.50"></text></g><g><title>checked_request2size (2 samples, 0.02%)</title><rect x="39.2433%" y="293" width="0.0175%" height="15" fill="rgb(209,67,49)" fg:x="4491" fg:w="2"/><text x="39.4933%" y="303.50"></text></g><g><title>__GI___libc_malloc (7 samples, 0.06%)</title><rect x="39.2083%" y="309" width="0.0612%" height="15" fill="rgb(213,87,29)" fg:x="4487" fg:w="7"/><text x="39.4583%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (13 samples, 0.11%)</title><rect x="39.1734%" y="405" width="0.1136%" height="15" fill="rgb(205,151,52)" fg:x="4483" fg:w="13"/><text x="39.4234%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (13 samples, 0.11%)</title><rect x="39.1734%" y="389" width="0.1136%" height="15" fill="rgb(253,215,39)" fg:x="4483" fg:w="13"/><text x="39.4234%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (13 samples, 0.11%)</title><rect x="39.1734%" y="373" width="0.1136%" height="15" fill="rgb(221,220,41)" fg:x="4483" fg:w="13"/><text x="39.4234%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (13 samples, 0.11%)</title><rect x="39.1734%" y="357" width="0.1136%" height="15" fill="rgb(218,133,21)" fg:x="4483" fg:w="13"/><text x="39.4234%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (13 samples, 0.11%)</title><rect x="39.1734%" y="341" width="0.1136%" height="15" fill="rgb(221,193,43)" fg:x="4483" fg:w="13"/><text x="39.4234%" y="351.50"></text></g><g><title>alloc::alloc::alloc (10 samples, 0.09%)</title><rect x="39.1996%" y="325" width="0.0874%" height="15" fill="rgb(240,128,52)" fg:x="4486" fg:w="10"/><text x="39.4496%" y="335.50"></text></g><g><title>__rdl_alloc (2 samples, 0.02%)</title><rect x="39.2695%" y="309" width="0.0175%" height="15" fill="rgb(253,114,12)" fg:x="4494" fg:w="2"/><text x="39.5195%" y="319.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.02%)</title><rect x="39.2695%" y="293" width="0.0175%" height="15" fill="rgb(215,223,47)" fg:x="4494" fg:w="2"/><text x="39.5195%" y="303.50"></text></g><g><title>&lt;T as alloc::borrow::ToOwned&gt;::to_owned (18 samples, 0.16%)</title><rect x="39.1646%" y="501" width="0.1573%" height="15" fill="rgb(248,225,23)" fg:x="4482" fg:w="18"/><text x="39.4146%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (18 samples, 0.16%)</title><rect x="39.1646%" y="485" width="0.1573%" height="15" fill="rgb(250,108,0)" fg:x="4482" fg:w="18"/><text x="39.4146%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (17 samples, 0.15%)</title><rect x="39.1734%" y="469" width="0.1485%" height="15" fill="rgb(228,208,7)" fg:x="4483" fg:w="17"/><text x="39.4234%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (17 samples, 0.15%)</title><rect x="39.1734%" y="453" width="0.1485%" height="15" fill="rgb(244,45,10)" fg:x="4483" fg:w="17"/><text x="39.4234%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (17 samples, 0.15%)</title><rect x="39.1734%" y="437" width="0.1485%" height="15" fill="rgb(207,125,25)" fg:x="4483" fg:w="17"/><text x="39.4234%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (17 samples, 0.15%)</title><rect x="39.1734%" y="421" width="0.1485%" height="15" fill="rgb(210,195,18)" fg:x="4483" fg:w="17"/><text x="39.4234%" y="431.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (4 samples, 0.03%)</title><rect x="39.2870%" y="405" width="0.0350%" height="15" fill="rgb(249,80,12)" fg:x="4496" fg:w="4"/><text x="39.5370%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.03%)</title><rect x="39.2870%" y="389" width="0.0350%" height="15" fill="rgb(221,65,9)" fg:x="4496" fg:w="4"/><text x="39.5370%" y="399.50"></text></g><g><title>__memmove_avx_unaligned_erms (4 samples, 0.03%)</title><rect x="39.2870%" y="373" width="0.0350%" height="15" fill="rgb(235,49,36)" fg:x="4496" fg:w="4"/><text x="39.5370%" y="383.50"></text></g><g><title>checked_request2size (3 samples, 0.03%)</title><rect x="39.4443%" y="309" width="0.0262%" height="15" fill="rgb(225,32,20)" fg:x="4514" fg:w="3"/><text x="39.6943%" y="319.50"></text></g><g><title>__GI___libc_malloc (11 samples, 0.10%)</title><rect x="39.4006%" y="325" width="0.0961%" height="15" fill="rgb(215,141,46)" fg:x="4509" fg:w="11"/><text x="39.6506%" y="335.50"></text></g><g><title>tcache_get (3 samples, 0.03%)</title><rect x="39.4705%" y="309" width="0.0262%" height="15" fill="rgb(250,160,47)" fg:x="4517" fg:w="3"/><text x="39.7205%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (16 samples, 0.14%)</title><rect x="39.3656%" y="421" width="0.1398%" height="15" fill="rgb(216,222,40)" fg:x="4505" fg:w="16"/><text x="39.6156%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (16 samples, 0.14%)</title><rect x="39.3656%" y="405" width="0.1398%" height="15" fill="rgb(234,217,39)" fg:x="4505" fg:w="16"/><text x="39.6156%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (16 samples, 0.14%)</title><rect x="39.3656%" y="389" width="0.1398%" height="15" fill="rgb(207,178,40)" fg:x="4505" fg:w="16"/><text x="39.6156%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (15 samples, 0.13%)</title><rect x="39.3743%" y="373" width="0.1311%" height="15" fill="rgb(221,136,13)" fg:x="4506" fg:w="15"/><text x="39.6243%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (15 samples, 0.13%)</title><rect x="39.3743%" y="357" width="0.1311%" height="15" fill="rgb(249,199,10)" fg:x="4506" fg:w="15"/><text x="39.6243%" y="367.50"></text></g><g><title>alloc::alloc::alloc (12 samples, 0.10%)</title><rect x="39.4006%" y="341" width="0.1049%" height="15" fill="rgb(249,222,13)" fg:x="4509" fg:w="12"/><text x="39.6506%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (33 samples, 0.29%)</title><rect x="39.3219%" y="501" width="0.2884%" height="15" fill="rgb(244,185,38)" fg:x="4500" fg:w="33"/><text x="39.5719%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (28 samples, 0.24%)</title><rect x="39.3656%" y="485" width="0.2447%" height="15" fill="rgb(236,202,9)" fg:x="4505" fg:w="28"/><text x="39.6156%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (28 samples, 0.24%)</title><rect x="39.3656%" y="469" width="0.2447%" height="15" fill="rgb(250,229,37)" fg:x="4505" fg:w="28"/><text x="39.6156%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (28 samples, 0.24%)</title><rect x="39.3656%" y="453" width="0.2447%" height="15" fill="rgb(206,174,23)" fg:x="4505" fg:w="28"/><text x="39.6156%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (28 samples, 0.24%)</title><rect x="39.3656%" y="437" width="0.2447%" height="15" fill="rgb(211,33,43)" fg:x="4505" fg:w="28"/><text x="39.6156%" y="447.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (12 samples, 0.10%)</title><rect x="39.5054%" y="421" width="0.1049%" height="15" fill="rgb(245,58,50)" fg:x="4521" fg:w="12"/><text x="39.7554%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (12 samples, 0.10%)</title><rect x="39.5054%" y="405" width="0.1049%" height="15" fill="rgb(244,68,36)" fg:x="4521" fg:w="12"/><text x="39.7554%" y="415.50"></text></g><g><title>__memmove_avx_unaligned_erms (11 samples, 0.10%)</title><rect x="39.5142%" y="389" width="0.0961%" height="15" fill="rgb(232,229,15)" fg:x="4522" fg:w="11"/><text x="39.7642%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (5 samples, 0.04%)</title><rect x="39.6103%" y="501" width="0.0437%" height="15" fill="rgb(254,30,23)" fg:x="4533" fg:w="5"/><text x="39.8603%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (5 samples, 0.04%)</title><rect x="39.6103%" y="485" width="0.0437%" height="15" fill="rgb(235,160,14)" fg:x="4533" fg:w="5"/><text x="39.8603%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.02%)</title><rect x="39.6540%" y="501" width="0.0175%" height="15" fill="rgb(212,155,44)" fg:x="4538" fg:w="2"/><text x="39.9040%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (8 samples, 0.07%)</title><rect x="39.8986%" y="485" width="0.0699%" height="15" fill="rgb(226,2,50)" fg:x="4566" fg:w="8"/><text x="40.1486%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (35 samples, 0.31%)</title><rect x="39.6714%" y="501" width="0.3058%" height="15" fill="rgb(234,177,6)" fg:x="4540" fg:w="35"/><text x="39.9214%" y="511.50"></text></g><g><title>&lt;nand2tetris::hardware::RAM as core::ops::index::Index&lt;u16&gt;&gt;::index (13 samples, 0.11%)</title><rect x="39.9773%" y="501" width="0.1136%" height="15" fill="rgb(217,24,9)" fg:x="4575" fg:w="13"/><text x="40.2273%" y="511.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (67 samples, 0.59%)</title><rect x="41.8036%" y="341" width="0.5855%" height="15" fill="rgb(220,13,46)" fg:x="4784" fg:w="67"/><text x="42.0536%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (169 samples, 1.48%)</title><rect x="41.3929%" y="357" width="1.4768%" height="15" fill="rgb(239,221,27)" fg:x="4737" fg:w="169"/><text x="41.6429%" y="367.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (55 samples, 0.48%)</title><rect x="42.3890%" y="341" width="0.4806%" height="15" fill="rgb(222,198,25)" fg:x="4851" fg:w="55"/><text x="42.6390%" y="351.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (182 samples, 1.59%)</title><rect x="43.7260%" y="341" width="1.5904%" height="15" fill="rgb(211,99,13)" fg:x="5004" fg:w="182"/><text x="43.9760%" y="351.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="45.2988%" y="325" width="0.0175%" height="15" fill="rgb(232,111,31)" fg:x="5184" fg:w="2"/><text x="45.5488%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (403 samples, 3.52%)</title><rect x="42.8696%" y="357" width="3.5215%" height="15" fill="rgb(245,82,37)" fg:x="4906" fg:w="403"/><text x="43.1196%" y="367.50">&lt;co..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (123 samples, 1.07%)</title><rect x="45.3163%" y="341" width="1.0748%" height="15" fill="rgb(227,149,46)" fg:x="5186" fg:w="123"/><text x="45.5663%" y="351.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (717 samples, 6.27%)</title><rect x="40.1433%" y="405" width="6.2653%" height="15" fill="rgb(218,36,50)" fg:x="4594" fg:w="717"/><text x="40.3933%" y="415.50">&lt;std::co..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (717 samples, 6.27%)</title><rect x="40.1433%" y="389" width="6.2653%" height="15" fill="rgb(226,80,48)" fg:x="4594" fg:w="717"/><text x="40.3933%" y="399.50">&lt;core::h..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (717 samples, 6.27%)</title><rect x="40.1433%" y="373" width="6.2653%" height="15" fill="rgb(238,224,15)" fg:x="4594" fg:w="717"/><text x="40.3933%" y="383.50">&lt;core::h..</text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="46.3911%" y="357" width="0.0175%" height="15" fill="rgb(241,136,10)" fg:x="5309" fg:w="2"/><text x="46.6411%" y="367.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (223 samples, 1.95%)</title><rect x="46.4086%" y="405" width="1.9486%" height="15" fill="rgb(208,32,45)" fg:x="5311" fg:w="223"/><text x="46.6586%" y="415.50">&lt;..</text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (79 samples, 0.69%)</title><rect x="47.6669%" y="389" width="0.6903%" height="15" fill="rgb(207,135,9)" fg:x="5455" fg:w="79"/><text x="47.9169%" y="399.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (79 samples, 0.69%)</title><rect x="47.6669%" y="373" width="0.6903%" height="15" fill="rgb(206,86,44)" fg:x="5455" fg:w="79"/><text x="47.9169%" y="383.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (79 samples, 0.69%)</title><rect x="47.6669%" y="357" width="0.6903%" height="15" fill="rgb(245,177,15)" fg:x="5455" fg:w="79"/><text x="47.9169%" y="367.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="48.3572%" y="405" width="0.0175%" height="15" fill="rgb(206,64,50)" fg:x="5534" fg:w="2"/><text x="48.6072%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (125 samples, 1.09%)</title><rect x="48.3747%" y="373" width="1.0923%" height="15" fill="rgb(234,36,40)" fg:x="5536" fg:w="125"/><text x="48.6247%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (125 samples, 1.09%)</title><rect x="48.3747%" y="357" width="1.0923%" height="15" fill="rgb(213,64,8)" fg:x="5536" fg:w="125"/><text x="48.6247%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (122 samples, 1.07%)</title><rect x="48.4009%" y="341" width="1.0661%" height="15" fill="rgb(210,75,36)" fg:x="5539" fg:w="122"/><text x="48.6509%" y="351.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (19 samples, 0.17%)</title><rect x="53.5302%" y="293" width="0.1660%" height="15" fill="rgb(229,88,21)" fg:x="6126" fg:w="19"/><text x="53.7802%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (44 samples, 0.38%)</title><rect x="53.4079%" y="309" width="0.3845%" height="15" fill="rgb(252,204,47)" fg:x="6112" fg:w="44"/><text x="53.6579%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (11 samples, 0.10%)</title><rect x="53.6963%" y="293" width="0.0961%" height="15" fill="rgb(208,77,27)" fg:x="6145" fg:w="11"/><text x="53.9463%" y="303.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (902 samples, 7.88%)</title><rect x="50.6466%" y="357" width="7.8819%" height="15" fill="rgb(221,76,26)" fg:x="5796" fg:w="902"/><text x="50.8966%" y="367.50">&lt;std::colle..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (902 samples, 7.88%)</title><rect x="50.6466%" y="341" width="7.8819%" height="15" fill="rgb(225,139,18)" fg:x="5796" fg:w="902"/><text x="50.8966%" y="351.50">&lt;core::hash..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (902 samples, 7.88%)</title><rect x="50.6466%" y="325" width="7.8819%" height="15" fill="rgb(230,137,11)" fg:x="5796" fg:w="902"/><text x="50.8966%" y="335.50">&lt;core::hash..</text></g><g><title>core::hash::sip::u8to64_le (542 samples, 4.74%)</title><rect x="53.7924%" y="309" width="4.7361%" height="15" fill="rgb(212,28,1)" fg:x="6156" fg:w="542"/><text x="54.0424%" y="319.50">core::..</text></g><g><title>core::intrinsics::copy_nonoverlapping (115 samples, 1.00%)</title><rect x="57.5236%" y="293" width="1.0049%" height="15" fill="rgb(248,164,17)" fg:x="6583" fg:w="115"/><text x="57.7736%" y="303.50"></text></g><g><title>core::cmp::min (40 samples, 0.35%)</title><rect x="59.8043%" y="293" width="0.3495%" height="15" fill="rgb(222,171,42)" fg:x="6844" fg:w="40"/><text x="60.0543%" y="303.50"></text></g><g><title>core::cmp::Ord::min (40 samples, 0.35%)</title><rect x="59.8043%" y="277" width="0.3495%" height="15" fill="rgb(243,84,45)" fg:x="6844" fg:w="40"/><text x="60.0543%" y="287.50"></text></g><g><title>core::cmp::min_by (40 samples, 0.35%)</title><rect x="59.8043%" y="261" width="0.3495%" height="15" fill="rgb(252,49,23)" fg:x="6844" fg:w="40"/><text x="60.0543%" y="271.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (326 samples, 2.85%)</title><rect x="59.0003%" y="341" width="2.8487%" height="15" fill="rgb(215,19,7)" fg:x="6752" fg:w="326"/><text x="59.2503%" y="351.50">&lt;s..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (326 samples, 2.85%)</title><rect x="59.0003%" y="325" width="2.8487%" height="15" fill="rgb(238,81,41)" fg:x="6752" fg:w="326"/><text x="59.2503%" y="335.50">&lt;c..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (326 samples, 2.85%)</title><rect x="59.0003%" y="309" width="2.8487%" height="15" fill="rgb(210,199,37)" fg:x="6752" fg:w="326"/><text x="59.2503%" y="319.50">&lt;c..</text></g><g><title>core::hash::sip::u8to64_le (194 samples, 1.70%)</title><rect x="60.1538%" y="293" width="1.6952%" height="15" fill="rgb(244,192,49)" fg:x="6884" fg:w="194"/><text x="60.4038%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (1,544 samples, 13.49%)</title><rect x="48.3747%" y="389" width="13.4918%" height="15" fill="rgb(226,211,11)" fg:x="5536" fg:w="1544"/><text x="48.6247%" y="399.50">&lt;alloc::string::Stri..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (1,419 samples, 12.40%)</title><rect x="49.4670%" y="373" width="12.3995%" height="15" fill="rgb(236,162,54)" fg:x="5661" fg:w="1419"/><text x="49.7170%" y="383.50">core::hash::impls::..</text></g><g><title>core::hash::Hasher::write_u8 (382 samples, 3.34%)</title><rect x="58.5285%" y="357" width="3.3380%" height="15" fill="rgb(220,229,9)" fg:x="6698" fg:w="382"/><text x="58.7785%" y="367.50">cor..</text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="61.8490%" y="341" width="0.0175%" height="15" fill="rgb(250,87,22)" fg:x="7078" fg:w="2"/><text x="62.0990%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.02%)</title><rect x="61.8927%" y="325" width="0.0175%" height="15" fill="rgb(239,43,17)" fg:x="7083" fg:w="2"/><text x="62.1427%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.02%)</title><rect x="61.8927%" y="309" width="0.0175%" height="15" fill="rgb(231,177,25)" fg:x="7083" fg:w="2"/><text x="62.1427%" y="319.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (9 samples, 0.08%)</title><rect x="61.8665%" y="373" width="0.0786%" height="15" fill="rgb(219,179,1)" fg:x="7080" fg:w="9"/><text x="62.1165%" y="383.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (9 samples, 0.08%)</title><rect x="61.8665%" y="357" width="0.0786%" height="15" fill="rgb(238,219,53)" fg:x="7080" fg:w="9"/><text x="62.1165%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (9 samples, 0.08%)</title><rect x="61.8665%" y="341" width="0.0786%" height="15" fill="rgb(232,167,36)" fg:x="7080" fg:w="9"/><text x="62.1165%" y="351.50"></text></g><g><title>core::hash::sip::u8to64_le (4 samples, 0.03%)</title><rect x="61.9102%" y="325" width="0.0350%" height="15" fill="rgb(244,19,51)" fg:x="7085" fg:w="4"/><text x="62.1602%" y="335.50"></text></g><g><title>hashbrown::map::make_hash (2,506 samples, 21.90%)</title><rect x="40.1258%" y="437" width="21.8979%" height="15" fill="rgb(224,6,22)" fg:x="4592" fg:w="2506"/><text x="40.3758%" y="447.50">hashbrown::map::make_hash</text></g><g><title>core::hash::BuildHasher::hash_one (2,506 samples, 21.90%)</title><rect x="40.1258%" y="421" width="21.8979%" height="15" fill="rgb(224,145,5)" fg:x="4592" fg:w="2506"/><text x="40.3758%" y="431.50">core::hash::BuildHasher::hash_one</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1,562 samples, 13.65%)</title><rect x="48.3747%" y="405" width="13.6491%" height="15" fill="rgb(234,130,49)" fg:x="5536" fg:w="1562"/><text x="48.6247%" y="415.50">core::hash::impls::&lt;i..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (18 samples, 0.16%)</title><rect x="61.8665%" y="389" width="0.1573%" height="15" fill="rgb(254,6,2)" fg:x="7080" fg:w="18"/><text x="62.1165%" y="399.50"></text></g><g><title>core::hash::Hasher::write_u8 (9 samples, 0.08%)</title><rect x="61.9451%" y="373" width="0.0786%" height="15" fill="rgb(208,96,46)" fg:x="7089" fg:w="9"/><text x="62.1951%" y="383.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (9 samples, 0.08%)</title><rect x="61.9451%" y="357" width="0.0786%" height="15" fill="rgb(239,3,39)" fg:x="7089" fg:w="9"/><text x="62.1951%" y="367.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (9 samples, 0.08%)</title><rect x="61.9451%" y="341" width="0.0786%" height="15" fill="rgb(233,210,1)" fg:x="7089" fg:w="9"/><text x="62.1951%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (9 samples, 0.08%)</title><rect x="61.9451%" y="325" width="0.0786%" height="15" fill="rgb(244,137,37)" fg:x="7089" fg:w="9"/><text x="62.1951%" y="335.50"></text></g><g><title>core::hash::sip::u8to64_le (6 samples, 0.05%)</title><rect x="61.9713%" y="309" width="0.0524%" height="15" fill="rgb(240,136,2)" fg:x="7092" fg:w="6"/><text x="62.2213%" y="319.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (23 samples, 0.20%)</title><rect x="62.5218%" y="389" width="0.2010%" height="15" fill="rgb(239,18,37)" fg:x="7155" fg:w="23"/><text x="62.7718%" y="399.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (23 samples, 0.20%)</title><rect x="62.5218%" y="373" width="0.2010%" height="15" fill="rgb(218,185,22)" fg:x="7155" fg:w="23"/><text x="62.7718%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::ops::index::Index&lt;core::ops::range::RangeFull&gt;&gt;::index (54 samples, 0.47%)</title><rect x="62.7228%" y="341" width="0.4719%" height="15" fill="rgb(225,218,4)" fg:x="7178" fg:w="54"/><text x="62.9728%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (54 samples, 0.47%)</title><rect x="62.7228%" y="325" width="0.4719%" height="15" fill="rgb(230,182,32)" fg:x="7178" fg:w="54"/><text x="62.9728%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (21 samples, 0.18%)</title><rect x="63.0112%" y="309" width="0.1835%" height="15" fill="rgb(242,56,43)" fg:x="7211" fg:w="21"/><text x="63.2612%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (347 samples, 3.03%)</title><rect x="62.7228%" y="357" width="3.0322%" height="15" fill="rgb(233,99,24)" fg:x="7178" fg:w="347"/><text x="62.9728%" y="367.50">&lt;al..</text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (293 samples, 2.56%)</title><rect x="63.1947%" y="341" width="2.5603%" height="15" fill="rgb(234,209,42)" fg:x="7232" fg:w="293"/><text x="63.4447%" y="351.50">co..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (293 samples, 2.56%)</title><rect x="63.1947%" y="325" width="2.5603%" height="15" fill="rgb(227,7,12)" fg:x="7232" fg:w="293"/><text x="63.4447%" y="335.50">co..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (293 samples, 2.56%)</title><rect x="63.1947%" y="309" width="2.5603%" height="15" fill="rgb(245,203,43)" fg:x="7232" fg:w="293"/><text x="63.4447%" y="319.50">co..</text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (293 samples, 2.56%)</title><rect x="63.1947%" y="293" width="2.5603%" height="15" fill="rgb(238,205,33)" fg:x="7232" fg:w="293"/><text x="63.4447%" y="303.50">&lt;[..</text></g><g><title>__memcmp_avx2_movbe (242 samples, 2.11%)</title><rect x="63.6403%" y="277" width="2.1146%" height="15" fill="rgb(231,56,7)" fg:x="7283" fg:w="242"/><text x="63.8903%" y="287.50">_..</text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="65.7375%" y="261" width="0.0175%" height="15" fill="rgb(244,186,29)" fg:x="7523" fg:w="2"/><text x="65.9875%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (380 samples, 3.32%)</title><rect x="62.7228%" y="389" width="3.3205%" height="15" fill="rgb(234,111,31)" fg:x="7178" fg:w="380"/><text x="62.9728%" y="399.50">has..</text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (380 samples, 3.32%)</title><rect x="62.7228%" y="373" width="3.3205%" height="15" fill="rgb(241,149,10)" fg:x="7178" fg:w="380"/><text x="62.9728%" y="383.50">has..</text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (32 samples, 0.28%)</title><rect x="65.7637%" y="357" width="0.2796%" height="15" fill="rgb(249,206,44)" fg:x="7526" fg:w="32"/><text x="66.0137%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (32 samples, 0.28%)</title><rect x="65.7637%" y="341" width="0.2796%" height="15" fill="rgb(251,153,30)" fg:x="7526" fg:w="32"/><text x="66.0137%" y="351.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (32 samples, 0.28%)</title><rect x="65.7637%" y="325" width="0.2796%" height="15" fill="rgb(239,152,38)" fg:x="7526" fg:w="32"/><text x="66.0137%" y="335.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (32 samples, 0.28%)</title><rect x="65.7637%" y="309" width="0.2796%" height="15" fill="rgb(249,139,47)" fg:x="7526" fg:w="32"/><text x="66.0137%" y="319.50"></text></g><g><title>__memcmp_avx2_movbe (30 samples, 0.26%)</title><rect x="65.7812%" y="293" width="0.2621%" height="15" fill="rgb(244,64,35)" fg:x="7528" fg:w="30"/><text x="66.0312%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::probe_seq (31 samples, 0.27%)</title><rect x="66.0433%" y="389" width="0.2709%" height="15" fill="rgb(216,46,15)" fg:x="7558" fg:w="31"/><text x="66.2933%" y="399.50"></text></g><g><title>hashbrown::raw::h2 (136 samples, 1.19%)</title><rect x="66.3142%" y="389" width="1.1884%" height="15" fill="rgb(250,74,19)" fg:x="7589" fg:w="136"/><text x="66.5642%" y="399.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (31 samples, 0.27%)</title><rect x="67.5026%" y="389" width="0.2709%" height="15" fill="rgb(249,42,33)" fg:x="7725" fg:w="31"/><text x="67.7526%" y="399.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (31 samples, 0.27%)</title><rect x="67.5026%" y="373" width="0.2709%" height="15" fill="rgb(242,149,17)" fg:x="7725" fg:w="31"/><text x="67.7526%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (31 samples, 0.27%)</title><rect x="67.5026%" y="357" width="0.2709%" height="15" fill="rgb(244,29,21)" fg:x="7725" fg:w="31"/><text x="67.7526%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (680 samples, 5.94%)</title><rect x="62.0238%" y="437" width="5.9420%" height="15" fill="rgb(220,130,37)" fg:x="7098" fg:w="680"/><text x="62.2738%" y="447.50">hashbrow..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (680 samples, 5.94%)</title><rect x="62.0238%" y="421" width="5.9420%" height="15" fill="rgb(211,67,2)" fg:x="7098" fg:w="680"/><text x="62.2738%" y="431.50">hashbrow..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (680 samples, 5.94%)</title><rect x="62.0238%" y="405" width="5.9420%" height="15" fill="rgb(235,68,52)" fg:x="7098" fg:w="680"/><text x="62.2738%" y="415.50">hashbrow..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (22 samples, 0.19%)</title><rect x="67.7735%" y="389" width="0.1922%" height="15" fill="rgb(246,142,3)" fg:x="7756" fg:w="22"/><text x="68.0235%" y="399.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (22 samples, 0.19%)</title><rect x="67.7735%" y="373" width="0.1922%" height="15" fill="rgb(241,25,7)" fg:x="7756" fg:w="22"/><text x="68.0235%" y="383.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (3,295 samples, 28.79%)</title><rect x="40.0909%" y="501" width="28.7924%" height="15" fill="rgb(242,119,39)" fg:x="4588" fg:w="3295"/><text x="40.3409%" y="511.50">&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; a..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (3,295 samples, 28.79%)</title><rect x="40.0909%" y="485" width="28.7924%" height="15" fill="rgb(241,98,45)" fg:x="4588" fg:w="3295"/><text x="40.3409%" y="495.50">std::collections::hash::map::HashMap&lt;K,V,S&gt;::g..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (3,295 samples, 28.79%)</title><rect x="40.0909%" y="469" width="28.7924%" height="15" fill="rgb(254,28,30)" fg:x="4588" fg:w="3295"/><text x="40.3409%" y="479.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::get</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (3,295 samples, 28.79%)</title><rect x="40.0909%" y="453" width="28.7924%" height="15" fill="rgb(241,142,54)" fg:x="4588" fg:w="3295"/><text x="40.3409%" y="463.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::is_empty (105 samples, 0.92%)</title><rect x="67.9657%" y="437" width="0.9175%" height="15" fill="rgb(222,85,15)" fg:x="7778" fg:w="105"/><text x="68.2157%" y="447.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="68.8833%" y="501" width="0.0262%" height="15" fill="rgb(210,85,47)" fg:x="7883" fg:w="3"/><text x="69.1333%" y="511.50"></text></g><g><title>checked_request2size (5 samples, 0.04%)</title><rect x="69.2590%" y="293" width="0.0437%" height="15" fill="rgb(224,206,25)" fg:x="7926" fg:w="5"/><text x="69.5090%" y="303.50"></text></g><g><title>__GI___libc_malloc (42 samples, 0.37%)</title><rect x="68.9794%" y="309" width="0.3670%" height="15" fill="rgb(243,201,19)" fg:x="7894" fg:w="42"/><text x="69.2294%" y="319.50"></text></g><g><title>tcache_get (5 samples, 0.04%)</title><rect x="69.3027%" y="293" width="0.0437%" height="15" fill="rgb(236,59,4)" fg:x="7931" fg:w="5"/><text x="69.5527%" y="303.50"></text></g><g><title>__rdl_alloc (4 samples, 0.03%)</title><rect x="69.3464%" y="309" width="0.0350%" height="15" fill="rgb(254,179,45)" fg:x="7936" fg:w="4"/><text x="69.5964%" y="319.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (4 samples, 0.03%)</title><rect x="69.3464%" y="293" width="0.0350%" height="15" fill="rgb(226,14,10)" fg:x="7936" fg:w="4"/><text x="69.5964%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (60 samples, 0.52%)</title><rect x="68.9095%" y="405" width="0.5243%" height="15" fill="rgb(244,27,41)" fg:x="7886" fg:w="60"/><text x="69.1595%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (60 samples, 0.52%)</title><rect x="68.9095%" y="389" width="0.5243%" height="15" fill="rgb(235,35,32)" fg:x="7886" fg:w="60"/><text x="69.1595%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (60 samples, 0.52%)</title><rect x="68.9095%" y="373" width="0.5243%" height="15" fill="rgb(218,68,31)" fg:x="7886" fg:w="60"/><text x="69.1595%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (57 samples, 0.50%)</title><rect x="68.9357%" y="357" width="0.4981%" height="15" fill="rgb(207,120,37)" fg:x="7889" fg:w="57"/><text x="69.1857%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (57 samples, 0.50%)</title><rect x="68.9357%" y="341" width="0.4981%" height="15" fill="rgb(227,98,0)" fg:x="7889" fg:w="57"/><text x="69.1857%" y="351.50"></text></g><g><title>alloc::alloc::alloc (54 samples, 0.47%)</title><rect x="68.9619%" y="325" width="0.4719%" height="15" fill="rgb(207,7,3)" fg:x="7892" fg:w="54"/><text x="69.2119%" y="335.50"></text></g><g><title>__rust_alloc (6 samples, 0.05%)</title><rect x="69.3813%" y="309" width="0.0524%" height="15" fill="rgb(206,98,19)" fg:x="7940" fg:w="6"/><text x="69.6313%" y="319.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (75 samples, 0.66%)</title><rect x="68.9095%" y="501" width="0.6554%" height="15" fill="rgb(217,5,26)" fg:x="7886" fg:w="75"/><text x="69.1595%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (75 samples, 0.66%)</title><rect x="68.9095%" y="485" width="0.6554%" height="15" fill="rgb(235,190,38)" fg:x="7886" fg:w="75"/><text x="69.1595%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (75 samples, 0.66%)</title><rect x="68.9095%" y="469" width="0.6554%" height="15" fill="rgb(247,86,24)" fg:x="7886" fg:w="75"/><text x="69.1595%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (75 samples, 0.66%)</title><rect x="68.9095%" y="453" width="0.6554%" height="15" fill="rgb(205,101,16)" fg:x="7886" fg:w="75"/><text x="69.1595%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (75 samples, 0.66%)</title><rect x="68.9095%" y="437" width="0.6554%" height="15" fill="rgb(246,168,33)" fg:x="7886" fg:w="75"/><text x="69.1595%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (75 samples, 0.66%)</title><rect x="68.9095%" y="421" width="0.6554%" height="15" fill="rgb(231,114,1)" fg:x="7886" fg:w="75"/><text x="69.1595%" y="431.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (15 samples, 0.13%)</title><rect x="69.4338%" y="405" width="0.1311%" height="15" fill="rgb(207,184,53)" fg:x="7946" fg:w="15"/><text x="69.6838%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (15 samples, 0.13%)</title><rect x="69.4338%" y="389" width="0.1311%" height="15" fill="rgb(224,95,51)" fg:x="7946" fg:w="15"/><text x="69.6838%" y="399.50"></text></g><g><title>__memmove_avx_unaligned_erms (10 samples, 0.09%)</title><rect x="69.4775%" y="373" width="0.0874%" height="15" fill="rgb(212,188,45)" fg:x="7951" fg:w="10"/><text x="69.7275%" y="383.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (5 samples, 0.04%)</title><rect x="69.5998%" y="485" width="0.0437%" height="15" fill="rgb(223,154,38)" fg:x="7965" fg:w="5"/><text x="69.8498%" y="495.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (5 samples, 0.04%)</title><rect x="69.5998%" y="469" width="0.0437%" height="15" fill="rgb(251,22,52)" fg:x="7965" fg:w="5"/><text x="69.8498%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (11 samples, 0.10%)</title><rect x="69.5648%" y="501" width="0.0961%" height="15" fill="rgb(229,209,22)" fg:x="7961" fg:w="11"/><text x="69.8148%" y="511.50"></text></g><g><title>core::ptr::read (2 samples, 0.02%)</title><rect x="69.6435%" y="485" width="0.0175%" height="15" fill="rgb(234,138,34)" fg:x="7970" fg:w="2"/><text x="69.8935%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (9 samples, 0.08%)</title><rect x="69.6610%" y="501" width="0.0786%" height="15" fill="rgb(212,95,11)" fg:x="7972" fg:w="9"/><text x="69.9110%" y="511.50"></text></g><g><title>core::ptr::write (9 samples, 0.08%)</title><rect x="69.6610%" y="485" width="0.0786%" height="15" fill="rgb(240,179,47)" fg:x="7972" fg:w="9"/><text x="69.9110%" y="495.50"></text></g><g><title>__GI___libc_free (18 samples, 0.16%)</title><rect x="69.7833%" y="405" width="0.1573%" height="15" fill="rgb(240,163,11)" fg:x="7986" fg:w="18"/><text x="70.0333%" y="415.50"></text></g><g><title>__rdl_dealloc (4 samples, 0.03%)</title><rect x="69.9406%" y="405" width="0.0350%" height="15" fill="rgb(236,37,12)" fg:x="8004" fg:w="4"/><text x="70.1906%" y="415.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (4 samples, 0.03%)</title><rect x="69.9406%" y="389" width="0.0350%" height="15" fill="rgb(232,164,16)" fg:x="8004" fg:w="4"/><text x="70.1906%" y="399.50"></text></g><g><title>__rust_dealloc (4 samples, 0.03%)</title><rect x="69.9755%" y="405" width="0.0350%" height="15" fill="rgb(244,205,15)" fg:x="8008" fg:w="4"/><text x="70.2255%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (59 samples, 0.52%)</title><rect x="69.7746%" y="437" width="0.5156%" height="15" fill="rgb(223,117,47)" fg:x="7985" fg:w="59"/><text x="70.0246%" y="447.50"></text></g><g><title>alloc::alloc::dealloc (59 samples, 0.52%)</title><rect x="69.7746%" y="421" width="0.5156%" height="15" fill="rgb(244,107,35)" fg:x="7985" fg:w="59"/><text x="70.0246%" y="431.50"></text></g><g><title>_int_free (32 samples, 0.28%)</title><rect x="70.0105%" y="405" width="0.2796%" height="15" fill="rgb(205,140,8)" fg:x="8012" fg:w="32"/><text x="70.2605%" y="415.50"></text></g><g><title>tcache_put (3 samples, 0.03%)</title><rect x="70.2639%" y="389" width="0.0262%" height="15" fill="rgb(228,84,46)" fg:x="8041" fg:w="3"/><text x="70.5139%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (64 samples, 0.56%)</title><rect x="69.7396%" y="501" width="0.5592%" height="15" fill="rgb(254,188,9)" fg:x="7981" fg:w="64"/><text x="69.9896%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (64 samples, 0.56%)</title><rect x="69.7396%" y="485" width="0.5592%" height="15" fill="rgb(206,112,54)" fg:x="7981" fg:w="64"/><text x="69.9896%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (64 samples, 0.56%)</title><rect x="69.7396%" y="469" width="0.5592%" height="15" fill="rgb(216,84,49)" fg:x="7981" fg:w="64"/><text x="69.9896%" y="479.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (64 samples, 0.56%)</title><rect x="69.7396%" y="453" width="0.5592%" height="15" fill="rgb(214,194,35)" fg:x="7981" fg:w="64"/><text x="69.9896%" y="463.50"></text></g><g><title>__GI___libc_free (9 samples, 0.08%)</title><rect x="70.3163%" y="373" width="0.0786%" height="15" fill="rgb(249,28,3)" fg:x="8047" fg:w="9"/><text x="70.5663%" y="383.50"></text></g><g><title>__rust_dealloc (5 samples, 0.04%)</title><rect x="70.3950%" y="373" width="0.0437%" height="15" fill="rgb(222,56,52)" fg:x="8056" fg:w="5"/><text x="70.6450%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (47 samples, 0.41%)</title><rect x="70.2988%" y="405" width="0.4107%" height="15" fill="rgb(245,217,50)" fg:x="8045" fg:w="47"/><text x="70.5488%" y="415.50"></text></g><g><title>alloc::alloc::dealloc (47 samples, 0.41%)</title><rect x="70.2988%" y="389" width="0.4107%" height="15" fill="rgb(213,201,24)" fg:x="8045" fg:w="47"/><text x="70.5488%" y="399.50"></text></g><g><title>_int_free (31 samples, 0.27%)</title><rect x="70.4387%" y="373" width="0.2709%" height="15" fill="rgb(248,116,28)" fg:x="8061" fg:w="31"/><text x="70.6887%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;nand2tetris::vm::Frame&gt;&gt; (48 samples, 0.42%)</title><rect x="70.2988%" y="501" width="0.4194%" height="15" fill="rgb(219,72,43)" fg:x="8045" fg:w="48"/><text x="70.5488%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;nand2tetris::vm::Frame&gt; (48 samples, 0.42%)</title><rect x="70.2988%" y="485" width="0.4194%" height="15" fill="rgb(209,138,14)" fg:x="8045" fg:w="48"/><text x="70.5488%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (48 samples, 0.42%)</title><rect x="70.2988%" y="469" width="0.4194%" height="15" fill="rgb(222,18,33)" fg:x="8045" fg:w="48"/><text x="70.5488%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (48 samples, 0.42%)</title><rect x="70.2988%" y="453" width="0.4194%" height="15" fill="rgb(213,199,7)" fg:x="8045" fg:w="48"/><text x="70.5488%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (48 samples, 0.42%)</title><rect x="70.2988%" y="437" width="0.4194%" height="15" fill="rgb(250,110,10)" fg:x="8045" fg:w="48"/><text x="70.5488%" y="447.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (48 samples, 0.42%)</title><rect x="70.2988%" y="421" width="0.4194%" height="15" fill="rgb(248,123,6)" fg:x="8045" fg:w="48"/><text x="70.5488%" y="431.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::last (2 samples, 0.02%)</title><rect x="70.7183%" y="501" width="0.0175%" height="15" fill="rgb(206,91,31)" fg:x="8093" fg:w="2"/><text x="70.9683%" y="511.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="70.8581%" y="437" width="0.0175%" height="15" fill="rgb(211,154,13)" fg:x="8109" fg:w="2"/><text x="71.1081%" y="447.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (15 samples, 0.13%)</title><rect x="70.8406%" y="453" width="0.1311%" height="15" fill="rgb(225,148,7)" fg:x="8107" fg:w="15"/><text x="71.0906%" y="463.50"></text></g><g><title>core::slice::memchr::memchr::{{closure}} (11 samples, 0.10%)</title><rect x="70.8756%" y="437" width="0.0961%" height="15" fill="rgb(220,160,43)" fg:x="8111" fg:w="11"/><text x="71.1256%" y="447.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.05%)</title><rect x="71.1290%" y="421" width="0.0524%" height="15" fill="rgb(213,52,39)" fg:x="8140" fg:w="6"/><text x="71.3790%" y="431.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (17 samples, 0.15%)</title><rect x="71.1115%" y="437" width="0.1485%" height="15" fill="rgb(243,137,7)" fg:x="8138" fg:w="17"/><text x="71.3615%" y="447.50"></text></g><g><title>core::slice::memchr::memchr_general_case::{{closure}} (9 samples, 0.08%)</title><rect x="71.1814%" y="421" width="0.0786%" height="15" fill="rgb(230,79,13)" fg:x="8146" fg:w="9"/><text x="71.4314%" y="431.50"></text></g><g><title>core::slice::memchr::contains_zero_byte (8 samples, 0.07%)</title><rect x="71.2600%" y="437" width="0.0699%" height="15" fill="rgb(247,105,23)" fg:x="8155" fg:w="8"/><text x="71.5100%" y="447.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (4 samples, 0.03%)</title><rect x="71.2950%" y="421" width="0.0350%" height="15" fill="rgb(223,179,41)" fg:x="8159" fg:w="4"/><text x="71.5450%" y="431.50"></text></g><g><title>core::str::&lt;impl str&gt;::split_once (71 samples, 0.62%)</title><rect x="70.7358%" y="501" width="0.6204%" height="15" fill="rgb(218,9,34)" fg:x="8095" fg:w="71"/><text x="70.9858%" y="511.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (71 samples, 0.62%)</title><rect x="70.7358%" y="485" width="0.6204%" height="15" fill="rgb(222,106,8)" fg:x="8095" fg:w="71"/><text x="70.9858%" y="495.50"></text></g><g><title>core::slice::memchr::memchr (66 samples, 0.58%)</title><rect x="70.7794%" y="469" width="0.5767%" height="15" fill="rgb(211,220,0)" fg:x="8100" fg:w="66"/><text x="71.0294%" y="479.50"></text></g><g><title>core::slice::memchr::memchr_general_case (44 samples, 0.38%)</title><rect x="70.9717%" y="453" width="0.3845%" height="15" fill="rgb(229,52,16)" fg:x="8122" fg:w="44"/><text x="71.2217%" y="463.50"></text></g><g><title>core::slice::memchr::repeat_byte (3 samples, 0.03%)</title><rect x="71.3300%" y="437" width="0.0262%" height="15" fill="rgb(212,155,18)" fg:x="8163" fg:w="3"/><text x="71.5800%" y="447.50"></text></g><g><title>&lt;nand2tetris::hardware::RAM as core::ops::index::Index&lt;u16&gt;&gt;::index (12 samples, 0.10%)</title><rect x="72.5533%" y="485" width="0.1049%" height="15" fill="rgb(242,21,14)" fg:x="8303" fg:w="12"/><text x="72.8033%" y="495.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (5 samples, 0.04%)</title><rect x="72.7718%" y="325" width="0.0437%" height="15" fill="rgb(222,19,48)" fg:x="8328" fg:w="5"/><text x="73.0218%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (10 samples, 0.09%)</title><rect x="72.7630%" y="341" width="0.0874%" height="15" fill="rgb(232,45,27)" fg:x="8327" fg:w="10"/><text x="73.0130%" y="351.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (4 samples, 0.03%)</title><rect x="72.8154%" y="325" width="0.0350%" height="15" fill="rgb(249,103,42)" fg:x="8333" fg:w="4"/><text x="73.0654%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (12 samples, 0.10%)</title><rect x="72.9640%" y="325" width="0.1049%" height="15" fill="rgb(246,81,33)" fg:x="8350" fg:w="12"/><text x="73.2140%" y="335.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (55 samples, 0.48%)</title><rect x="72.6669%" y="389" width="0.4806%" height="15" fill="rgb(252,33,42)" fg:x="8316" fg:w="55"/><text x="72.9169%" y="399.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (55 samples, 0.48%)</title><rect x="72.6669%" y="373" width="0.4806%" height="15" fill="rgb(209,212,41)" fg:x="8316" fg:w="55"/><text x="72.9169%" y="383.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (55 samples, 0.48%)</title><rect x="72.6669%" y="357" width="0.4806%" height="15" fill="rgb(207,154,6)" fg:x="8316" fg:w="55"/><text x="72.9169%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (34 samples, 0.30%)</title><rect x="72.8504%" y="341" width="0.2971%" height="15" fill="rgb(223,64,47)" fg:x="8337" fg:w="34"/><text x="73.1004%" y="351.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (9 samples, 0.08%)</title><rect x="73.0689%" y="325" width="0.0786%" height="15" fill="rgb(211,161,38)" fg:x="8362" fg:w="9"/><text x="73.3189%" y="335.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (10 samples, 0.09%)</title><rect x="73.1475%" y="389" width="0.0874%" height="15" fill="rgb(219,138,40)" fg:x="8371" fg:w="10"/><text x="73.3975%" y="399.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (6 samples, 0.05%)</title><rect x="73.1825%" y="373" width="0.0524%" height="15" fill="rgb(241,228,46)" fg:x="8375" fg:w="6"/><text x="73.4325%" y="383.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (3 samples, 0.03%)</title><rect x="73.2087%" y="357" width="0.0262%" height="15" fill="rgb(223,209,38)" fg:x="8378" fg:w="3"/><text x="73.4587%" y="367.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (3 samples, 0.03%)</title><rect x="73.2087%" y="341" width="0.0262%" height="15" fill="rgb(236,164,45)" fg:x="8378" fg:w="3"/><text x="73.4587%" y="351.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (29 samples, 0.25%)</title><rect x="73.2698%" y="341" width="0.2534%" height="15" fill="rgb(231,15,5)" fg:x="8385" fg:w="29"/><text x="73.5198%" y="351.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (29 samples, 0.25%)</title><rect x="73.2698%" y="325" width="0.2534%" height="15" fill="rgb(252,35,15)" fg:x="8385" fg:w="29"/><text x="73.5198%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (29 samples, 0.25%)</title><rect x="73.2698%" y="309" width="0.2534%" height="15" fill="rgb(248,181,18)" fg:x="8385" fg:w="29"/><text x="73.5198%" y="319.50"></text></g><g><title>core::hash::sip::u8to64_le (18 samples, 0.16%)</title><rect x="73.3660%" y="293" width="0.1573%" height="15" fill="rgb(233,39,42)" fg:x="8396" fg:w="18"/><text x="73.6160%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.02%)</title><rect x="73.5058%" y="277" width="0.0175%" height="15" fill="rgb(238,110,33)" fg:x="8412" fg:w="2"/><text x="73.7558%" y="287.50"></text></g><g><title>core::cmp::min (4 samples, 0.03%)</title><rect x="73.6543%" y="277" width="0.0350%" height="15" fill="rgb(233,195,10)" fg:x="8429" fg:w="4"/><text x="73.9043%" y="287.50"></text></g><g><title>core::cmp::Ord::min (4 samples, 0.03%)</title><rect x="73.6543%" y="261" width="0.0350%" height="15" fill="rgb(254,105,3)" fg:x="8429" fg:w="4"/><text x="73.9043%" y="271.50"></text></g><g><title>core::cmp::min_by (4 samples, 0.03%)</title><rect x="73.6543%" y="245" width="0.0350%" height="15" fill="rgb(221,225,9)" fg:x="8429" fg:w="4"/><text x="73.9043%" y="255.50"></text></g><g><title>hashbrown::map::make_hash (130 samples, 1.14%)</title><rect x="72.6582%" y="421" width="1.1360%" height="15" fill="rgb(224,227,45)" fg:x="8315" fg:w="130"/><text x="72.9082%" y="431.50"></text></g><g><title>core::hash::BuildHasher::hash_one (129 samples, 1.13%)</title><rect x="72.6669%" y="405" width="1.1272%" height="15" fill="rgb(229,198,43)" fg:x="8316" fg:w="129"/><text x="72.9169%" y="415.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (64 samples, 0.56%)</title><rect x="73.2349%" y="389" width="0.5592%" height="15" fill="rgb(206,209,35)" fg:x="8381" fg:w="64"/><text x="73.4849%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (64 samples, 0.56%)</title><rect x="73.2349%" y="373" width="0.5592%" height="15" fill="rgb(245,195,53)" fg:x="8381" fg:w="64"/><text x="73.4849%" y="383.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (63 samples, 0.55%)</title><rect x="73.2436%" y="357" width="0.5505%" height="15" fill="rgb(240,92,26)" fg:x="8382" fg:w="63"/><text x="73.4936%" y="367.50"></text></g><g><title>core::hash::Hasher::write_u8 (31 samples, 0.27%)</title><rect x="73.5232%" y="341" width="0.2709%" height="15" fill="rgb(207,40,23)" fg:x="8414" fg:w="31"/><text x="73.7732%" y="351.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (24 samples, 0.21%)</title><rect x="73.5844%" y="325" width="0.2097%" height="15" fill="rgb(223,111,35)" fg:x="8421" fg:w="24"/><text x="73.8344%" y="335.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (24 samples, 0.21%)</title><rect x="73.5844%" y="309" width="0.2097%" height="15" fill="rgb(229,147,28)" fg:x="8421" fg:w="24"/><text x="73.8344%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (24 samples, 0.21%)</title><rect x="73.5844%" y="293" width="0.2097%" height="15" fill="rgb(211,29,28)" fg:x="8421" fg:w="24"/><text x="73.8344%" y="303.50"></text></g><g><title>core::hash::sip::u8to64_le (12 samples, 0.10%)</title><rect x="73.6893%" y="277" width="0.1049%" height="15" fill="rgb(228,72,33)" fg:x="8433" fg:w="12"/><text x="73.9393%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::ops::index::Index&lt;core::ops::range::RangeFull&gt;&gt;::index (5 samples, 0.04%)</title><rect x="73.8553%" y="325" width="0.0437%" height="15" fill="rgb(205,214,31)" fg:x="8452" fg:w="5"/><text x="74.1053%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (5 samples, 0.04%)</title><rect x="73.8553%" y="309" width="0.0437%" height="15" fill="rgb(224,111,15)" fg:x="8452" fg:w="5"/><text x="74.1053%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (37 samples, 0.32%)</title><rect x="73.8466%" y="373" width="0.3233%" height="15" fill="rgb(253,21,26)" fg:x="8451" fg:w="37"/><text x="74.0966%" y="383.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (36 samples, 0.31%)</title><rect x="73.8553%" y="357" width="0.3146%" height="15" fill="rgb(245,139,43)" fg:x="8452" fg:w="36"/><text x="74.1053%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (36 samples, 0.31%)</title><rect x="73.8553%" y="341" width="0.3146%" height="15" fill="rgb(252,170,7)" fg:x="8452" fg:w="36"/><text x="74.1053%" y="351.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (31 samples, 0.27%)</title><rect x="73.8990%" y="325" width="0.2709%" height="15" fill="rgb(231,118,14)" fg:x="8457" fg:w="31"/><text x="74.1490%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (31 samples, 0.27%)</title><rect x="73.8990%" y="309" width="0.2709%" height="15" fill="rgb(238,83,0)" fg:x="8457" fg:w="31"/><text x="74.1490%" y="319.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (31 samples, 0.27%)</title><rect x="73.8990%" y="293" width="0.2709%" height="15" fill="rgb(221,39,39)" fg:x="8457" fg:w="31"/><text x="74.1490%" y="303.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (31 samples, 0.27%)</title><rect x="73.8990%" y="277" width="0.2709%" height="15" fill="rgb(222,119,46)" fg:x="8457" fg:w="31"/><text x="74.1490%" y="287.50"></text></g><g><title>__memcmp_avx2_movbe (27 samples, 0.24%)</title><rect x="73.9339%" y="261" width="0.2359%" height="15" fill="rgb(222,165,49)" fg:x="8461" fg:w="27"/><text x="74.1839%" y="271.50"></text></g><g><title>hashbrown::raw::h2 (6 samples, 0.05%)</title><rect x="74.1786%" y="373" width="0.0524%" height="15" fill="rgb(219,113,52)" fg:x="8489" fg:w="6"/><text x="74.4286%" y="383.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (5 samples, 0.04%)</title><rect x="74.2310%" y="373" width="0.0437%" height="15" fill="rgb(214,7,15)" fg:x="8495" fg:w="5"/><text x="74.4810%" y="383.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (5 samples, 0.04%)</title><rect x="74.2310%" y="357" width="0.0437%" height="15" fill="rgb(235,32,4)" fg:x="8495" fg:w="5"/><text x="74.4810%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5 samples, 0.04%)</title><rect x="74.2310%" y="341" width="0.0437%" height="15" fill="rgb(238,90,54)" fg:x="8495" fg:w="5"/><text x="74.4810%" y="351.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (188 samples, 1.64%)</title><rect x="72.6582%" y="485" width="1.6428%" height="15" fill="rgb(213,208,19)" fg:x="8315" fg:w="188"/><text x="72.9082%" y="495.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (188 samples, 1.64%)</title><rect x="72.6582%" y="469" width="1.6428%" height="15" fill="rgb(233,156,4)" fg:x="8315" fg:w="188"/><text x="72.9082%" y="479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (188 samples, 1.64%)</title><rect x="72.6582%" y="453" width="1.6428%" height="15" fill="rgb(207,194,5)" fg:x="8315" fg:w="188"/><text x="72.9082%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (188 samples, 1.64%)</title><rect x="72.6582%" y="437" width="1.6428%" height="15" fill="rgb(206,111,30)" fg:x="8315" fg:w="188"/><text x="72.9082%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (58 samples, 0.51%)</title><rect x="73.7941%" y="421" width="0.5068%" height="15" fill="rgb(243,70,54)" fg:x="8445" fg:w="58"/><text x="74.0441%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (58 samples, 0.51%)</title><rect x="73.7941%" y="405" width="0.5068%" height="15" fill="rgb(242,28,8)" fg:x="8445" fg:w="58"/><text x="74.0441%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (58 samples, 0.51%)</title><rect x="73.7941%" y="389" width="0.5068%" height="15" fill="rgb(219,106,18)" fg:x="8445" fg:w="58"/><text x="74.0441%" y="399.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (3 samples, 0.03%)</title><rect x="74.2747%" y="373" width="0.0262%" height="15" fill="rgb(244,222,10)" fg:x="8500" fg:w="3"/><text x="74.5247%" y="383.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (3 samples, 0.03%)</title><rect x="74.2747%" y="357" width="0.0262%" height="15" fill="rgb(236,179,52)" fg:x="8500" fg:w="3"/><text x="74.5247%" y="367.50"></text></g><g><title>nand2tetris::vm::&lt;impl nand2tetris::hardware::RAM&gt;::get (339 samples, 2.96%)</title><rect x="71.3562%" y="501" width="2.9623%" height="15" fill="rgb(213,23,39)" fg:x="8166" fg:w="339"/><text x="71.6062%" y="511.50">nan..</text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="74.3009%" y="485" width="0.0175%" height="15" fill="rgb(238,48,10)" fg:x="8503" fg:w="2"/><text x="74.5509%" y="495.50"></text></g><g><title>nand2tetris::vm::&lt;impl nand2tetris::hardware::RAM&gt;::pop (50 samples, 0.44%)</title><rect x="74.3184%" y="501" width="0.4369%" height="15" fill="rgb(251,196,23)" fg:x="8505" fg:w="50"/><text x="74.5684%" y="511.50"></text></g><g><title>&lt;nand2tetris::hardware::RAM as core::ops::index::Index&lt;u16&gt;&gt;::index (3 samples, 0.03%)</title><rect x="74.7291%" y="485" width="0.0262%" height="15" fill="rgb(250,152,24)" fg:x="8552" fg:w="3"/><text x="74.9791%" y="495.50"></text></g><g><title>&lt;nand2tetris::hardware::RAM as core::ops::index::IndexMut&lt;u16&gt;&gt;::index_mut (8 samples, 0.07%)</title><rect x="76.0049%" y="485" width="0.0699%" height="15" fill="rgb(209,150,17)" fg:x="8698" fg:w="8"/><text x="76.2549%" y="495.50"></text></g><g><title>nand2tetris::vm::&lt;impl nand2tetris::hardware::RAM&gt;::push (153 samples, 1.34%)</title><rect x="74.7553%" y="501" width="1.3369%" height="15" fill="rgb(234,202,34)" fg:x="8555" fg:w="153"/><text x="75.0053%" y="511.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="76.0748%" y="485" width="0.0175%" height="15" fill="rgb(253,148,53)" fg:x="8706" fg:w="2"/><text x="76.3248%" y="495.50"></text></g><g><title>&lt;nand2tetris::hardware::RAM as core::ops::index::IndexMut&lt;u16&gt;&gt;::index_mut (11 samples, 0.10%)</title><rect x="76.6340%" y="485" width="0.0961%" height="15" fill="rgb(218,129,16)" fg:x="8770" fg:w="11"/><text x="76.8840%" y="495.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.03%)</title><rect x="76.7302%" y="341" width="0.0262%" height="15" fill="rgb(216,85,19)" fg:x="8781" fg:w="3"/><text x="76.9802%" y="351.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (3 samples, 0.03%)</title><rect x="76.7302%" y="325" width="0.0262%" height="15" fill="rgb(235,228,7)" fg:x="8781" fg:w="3"/><text x="76.9802%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.03%)</title><rect x="76.7302%" y="309" width="0.0262%" height="15" fill="rgb(245,175,0)" fg:x="8781" fg:w="3"/><text x="76.9802%" y="319.50"></text></g><g><title>core::hash::sip::u8to64_le (2 samples, 0.02%)</title><rect x="76.7389%" y="293" width="0.0175%" height="15" fill="rgb(208,168,36)" fg:x="8782" fg:w="2"/><text x="76.9889%" y="303.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (5 samples, 0.04%)</title><rect x="76.7302%" y="485" width="0.0437%" height="15" fill="rgb(246,171,24)" fg:x="8781" fg:w="5"/><text x="76.9802%" y="495.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (5 samples, 0.04%)</title><rect x="76.7302%" y="469" width="0.0437%" height="15" fill="rgb(215,142,24)" fg:x="8781" fg:w="5"/><text x="76.9802%" y="479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (5 samples, 0.04%)</title><rect x="76.7302%" y="453" width="0.0437%" height="15" fill="rgb(250,187,7)" fg:x="8781" fg:w="5"/><text x="76.9802%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (5 samples, 0.04%)</title><rect x="76.7302%" y="437" width="0.0437%" height="15" fill="rgb(228,66,33)" fg:x="8781" fg:w="5"/><text x="76.9802%" y="447.50"></text></g><g><title>hashbrown::map::make_hash (5 samples, 0.04%)</title><rect x="76.7302%" y="421" width="0.0437%" height="15" fill="rgb(234,215,21)" fg:x="8781" fg:w="5"/><text x="76.9802%" y="431.50"></text></g><g><title>core::hash::BuildHasher::hash_one (5 samples, 0.04%)</title><rect x="76.7302%" y="405" width="0.0437%" height="15" fill="rgb(222,191,20)" fg:x="8781" fg:w="5"/><text x="76.9802%" y="415.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (5 samples, 0.04%)</title><rect x="76.7302%" y="389" width="0.0437%" height="15" fill="rgb(245,79,54)" fg:x="8781" fg:w="5"/><text x="76.9802%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (5 samples, 0.04%)</title><rect x="76.7302%" y="373" width="0.0437%" height="15" fill="rgb(240,10,37)" fg:x="8781" fg:w="5"/><text x="76.9802%" y="383.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (5 samples, 0.04%)</title><rect x="76.7302%" y="357" width="0.0437%" height="15" fill="rgb(214,192,32)" fg:x="8781" fg:w="5"/><text x="76.9802%" y="367.50"></text></g><g><title>core::hash::Hasher::write_u8 (2 samples, 0.02%)</title><rect x="76.7564%" y="341" width="0.0175%" height="15" fill="rgb(209,36,54)" fg:x="8784" fg:w="2"/><text x="77.0064%" y="351.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="76.7564%" y="325" width="0.0175%" height="15" fill="rgb(220,10,11)" fg:x="8784" fg:w="2"/><text x="77.0064%" y="335.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="76.7564%" y="309" width="0.0175%" height="15" fill="rgb(221,106,17)" fg:x="8784" fg:w="2"/><text x="77.0064%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.02%)</title><rect x="76.7564%" y="293" width="0.0175%" height="15" fill="rgb(251,142,44)" fg:x="8784" fg:w="2"/><text x="77.0064%" y="303.50"></text></g><g><title>core::hash::sip::u8to64_le (2 samples, 0.02%)</title><rect x="76.7564%" y="277" width="0.0175%" height="15" fill="rgb(238,13,15)" fg:x="8784" fg:w="2"/><text x="77.0064%" y="287.50"></text></g><g><title>nand2tetris::vm::&lt;impl nand2tetris::hardware::RAM&gt;::set (80 samples, 0.70%)</title><rect x="76.0923%" y="501" width="0.6991%" height="15" fill="rgb(208,107,27)" fg:x="8708" fg:w="80"/><text x="76.3423%" y="511.50"></text></g><g><title>nand2tetris::vm::VM::step (4,720 samples, 41.24%)</title><rect x="35.6082%" y="517" width="41.2443%" height="15" fill="rgb(205,136,37)" fg:x="4075" fg:w="4720"/><text x="35.8582%" y="527.50">nand2tetris::vm::VM::step</text></g><g><title>nand2tetris::vm::&lt;impl nand2tetris::hardware::RAM&gt;::stack_top (7 samples, 0.06%)</title><rect x="76.7913%" y="501" width="0.0612%" height="15" fill="rgb(250,205,27)" fg:x="8788" fg:w="7"/><text x="77.0413%" y="511.50"></text></g><g><title>&lt;nand2tetris::hardware::RAM as core::ops::index::IndexMut&lt;u16&gt;&gt;::index_mut (5 samples, 0.04%)</title><rect x="76.8088%" y="485" width="0.0437%" height="15" fill="rgb(210,80,43)" fg:x="8790" fg:w="5"/><text x="77.0588%" y="495.50"></text></g><g><title>sdl2::rect::Point::new (4 samples, 0.03%)</title><rect x="76.8525%" y="517" width="0.0350%" height="15" fill="rgb(247,160,36)" fg:x="8795" fg:w="4"/><text x="77.1025%" y="527.50"></text></g><g><title>sdl2::rect::clamp_position (4 samples, 0.03%)</title><rect x="76.8525%" y="501" width="0.0350%" height="15" fill="rgb(234,13,49)" fg:x="8795" fg:w="4"/><text x="77.1025%" y="511.50"></text></g><g><title>[libGLX_nvidia.so.470.103.01] (59 samples, 0.52%)</title><rect x="76.9137%" y="405" width="0.5156%" height="15" fill="rgb(234,122,0)" fg:x="8802" fg:w="59"/><text x="77.1637%" y="415.50"></text></g><g><title>[libnvidia-glcore.so.470.103.01] (59 samples, 0.52%)</title><rect x="76.9137%" y="389" width="0.5156%" height="15" fill="rgb(207,146,38)" fg:x="8802" fg:w="59"/><text x="77.1637%" y="399.50"></text></g><g><title>[libnvidia-glcore.so.470.103.01] (57 samples, 0.50%)</title><rect x="76.9311%" y="373" width="0.4981%" height="15" fill="rgb(207,177,25)" fg:x="8804" fg:w="57"/><text x="77.1811%" y="383.50"></text></g><g><title>__GI___sched_yield (56 samples, 0.49%)</title><rect x="76.9399%" y="357" width="0.4893%" height="15" fill="rgb(211,178,42)" fg:x="8805" fg:w="56"/><text x="77.1899%" y="367.50"></text></g><g><title>[unknown] (55 samples, 0.48%)</title><rect x="76.9486%" y="341" width="0.4806%" height="15" fill="rgb(230,69,54)" fg:x="8806" fg:w="55"/><text x="77.1986%" y="351.50"></text></g><g><title>[unknown] (39 samples, 0.34%)</title><rect x="77.0884%" y="325" width="0.3408%" height="15" fill="rgb(214,135,41)" fg:x="8822" fg:w="39"/><text x="77.3384%" y="335.50"></text></g><g><title>[unknown] (36 samples, 0.31%)</title><rect x="77.1146%" y="309" width="0.3146%" height="15" fill="rgb(237,67,25)" fg:x="8825" fg:w="36"/><text x="77.3646%" y="319.50"></text></g><g><title>[unknown] (16 samples, 0.14%)</title><rect x="77.2894%" y="293" width="0.1398%" height="15" fill="rgb(222,189,50)" fg:x="8845" fg:w="16"/><text x="77.5394%" y="303.50"></text></g><g><title>[unknown] (15 samples, 0.13%)</title><rect x="77.2981%" y="277" width="0.1311%" height="15" fill="rgb(245,148,34)" fg:x="8846" fg:w="15"/><text x="77.5481%" y="287.50"></text></g><g><title>[unknown] (11 samples, 0.10%)</title><rect x="77.3331%" y="261" width="0.0961%" height="15" fill="rgb(222,29,6)" fg:x="8850" fg:w="11"/><text x="77.5831%" y="271.50"></text></g><g><title>[unknown] (7 samples, 0.06%)</title><rect x="77.3681%" y="245" width="0.0612%" height="15" fill="rgb(221,189,43)" fg:x="8854" fg:w="7"/><text x="77.6181%" y="255.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="77.4030%" y="229" width="0.0262%" height="15" fill="rgb(207,36,27)" fg:x="8858" fg:w="3"/><text x="77.6530%" y="239.50"></text></g><g><title>[libGLX_nvidia.so.470.103.01] (66 samples, 0.58%)</title><rect x="76.8962%" y="485" width="0.5767%" height="15" fill="rgb(217,90,24)" fg:x="8800" fg:w="66"/><text x="77.1462%" y="495.50"></text></g><g><title>[libGLX_nvidia.so.470.103.01] (66 samples, 0.58%)</title><rect x="76.8962%" y="469" width="0.5767%" height="15" fill="rgb(224,66,35)" fg:x="8800" fg:w="66"/><text x="77.1462%" y="479.50"></text></g><g><title>[libnvidia-glcore.so.470.103.01] (66 samples, 0.58%)</title><rect x="76.8962%" y="453" width="0.5767%" height="15" fill="rgb(221,13,50)" fg:x="8800" fg:w="66"/><text x="77.1462%" y="463.50"></text></g><g><title>[libnvidia-glcore.so.470.103.01] (65 samples, 0.57%)</title><rect x="76.9049%" y="437" width="0.5680%" height="15" fill="rgb(236,68,49)" fg:x="8801" fg:w="65"/><text x="77.1549%" y="447.50"></text></g><g><title>[libnvidia-glcore.so.470.103.01] (64 samples, 0.56%)</title><rect x="76.9137%" y="421" width="0.5592%" height="15" fill="rgb(229,146,28)" fg:x="8802" fg:w="64"/><text x="77.1637%" y="431.50"></text></g><g><title>[libnvidia-glcore.so.470.103.01] (5 samples, 0.04%)</title><rect x="77.4292%" y="405" width="0.0437%" height="15" fill="rgb(225,31,38)" fg:x="8861" fg:w="5"/><text x="77.6792%" y="415.50"></text></g><g><title>[libnvidia-glcore.so.470.103.01] (5 samples, 0.04%)</title><rect x="77.4292%" y="389" width="0.0437%" height="15" fill="rgb(250,208,3)" fg:x="8861" fg:w="5"/><text x="77.6792%" y="399.50"></text></g><g><title>[libnvidia-glcore.so.470.103.01] (4 samples, 0.03%)</title><rect x="77.4380%" y="373" width="0.0350%" height="15" fill="rgb(246,54,23)" fg:x="8862" fg:w="4"/><text x="77.6880%" y="383.50"></text></g><g><title>[libnvidia-glcore.so.470.103.01] (3 samples, 0.03%)</title><rect x="77.4467%" y="357" width="0.0262%" height="15" fill="rgb(243,76,11)" fg:x="8863" fg:w="3"/><text x="77.6967%" y="367.50"></text></g><g><title>[libnvidia-glcore.so.470.103.01] (3 samples, 0.03%)</title><rect x="77.4467%" y="341" width="0.0262%" height="15" fill="rgb(245,21,50)" fg:x="8863" fg:w="3"/><text x="77.6967%" y="351.50"></text></g><g><title>[libnvidia-glcore.so.470.103.01] (2 samples, 0.02%)</title><rect x="77.4554%" y="325" width="0.0175%" height="15" fill="rgb(228,9,43)" fg:x="8864" fg:w="2"/><text x="77.7054%" y="335.50"></text></g><g><title>[libnvidia-glcore.so.470.103.01] (2 samples, 0.02%)</title><rect x="77.4554%" y="309" width="0.0175%" height="15" fill="rgb(208,100,47)" fg:x="8864" fg:w="2"/><text x="77.7054%" y="319.50"></text></g><g><title>[libnvidia-glcore.so.470.103.01] (2 samples, 0.02%)</title><rect x="77.4554%" y="293" width="0.0175%" height="15" fill="rgb(232,26,8)" fg:x="8864" fg:w="2"/><text x="77.7054%" y="303.50"></text></g><g><title>[libnvidia-glcore.so.470.103.01] (2 samples, 0.02%)</title><rect x="77.4554%" y="277" width="0.0175%" height="15" fill="rgb(216,166,38)" fg:x="8864" fg:w="2"/><text x="77.7054%" y="287.50"></text></g><g><title>[libnvidia-glcore.so.470.103.01] (2 samples, 0.02%)</title><rect x="77.4554%" y="261" width="0.0175%" height="15" fill="rgb(251,202,51)" fg:x="8864" fg:w="2"/><text x="77.7054%" y="271.50"></text></g><g><title>[libnvidia-glcore.so.470.103.01] (8 samples, 0.07%)</title><rect x="77.5253%" y="389" width="0.0699%" height="15" fill="rgb(254,216,34)" fg:x="8872" fg:w="8"/><text x="77.7753%" y="399.50"></text></g><g><title>[libnvidia-glcore.so.470.103.01] (8 samples, 0.07%)</title><rect x="77.5253%" y="373" width="0.0699%" height="15" fill="rgb(251,32,27)" fg:x="8872" fg:w="8"/><text x="77.7753%" y="383.50"></text></g><g><title>[libnvidia-glcore.so.470.103.01] (8 samples, 0.07%)</title><rect x="77.5253%" y="357" width="0.0699%" height="15" fill="rgb(208,127,28)" fg:x="8872" fg:w="8"/><text x="77.7753%" y="367.50"></text></g><g><title>[libnvidia-glcore.so.470.103.01] (8 samples, 0.07%)</title><rect x="77.5253%" y="341" width="0.0699%" height="15" fill="rgb(224,137,22)" fg:x="8872" fg:w="8"/><text x="77.7753%" y="351.50"></text></g><g><title>[libnvidia-glcore.so.470.103.01] (8 samples, 0.07%)</title><rect x="77.5253%" y="325" width="0.0699%" height="15" fill="rgb(254,70,32)" fg:x="8872" fg:w="8"/><text x="77.7753%" y="335.50"></text></g><g><title>[libnvidia-glcore.so.470.103.01] (8 samples, 0.07%)</title><rect x="77.5253%" y="309" width="0.0699%" height="15" fill="rgb(229,75,37)" fg:x="8872" fg:w="8"/><text x="77.7753%" y="319.50"></text></g><g><title>[libnvidia-glcore.so.470.103.01] (8 samples, 0.07%)</title><rect x="77.5253%" y="293" width="0.0699%" height="15" fill="rgb(252,64,23)" fg:x="8872" fg:w="8"/><text x="77.7753%" y="303.50"></text></g><g><title>[libnvidia-glcore.so.470.103.01] (8 samples, 0.07%)</title><rect x="77.5253%" y="277" width="0.0699%" height="15" fill="rgb(232,162,48)" fg:x="8872" fg:w="8"/><text x="77.7753%" y="287.50"></text></g><g><title>[libnvidia-glcore.so.470.103.01] (8 samples, 0.07%)</title><rect x="77.5253%" y="261" width="0.0699%" height="15" fill="rgb(246,160,12)" fg:x="8872" fg:w="8"/><text x="77.7753%" y="271.50"></text></g><g><title>[libnvidia-glcore.so.470.103.01] (8 samples, 0.07%)</title><rect x="77.5253%" y="245" width="0.0699%" height="15" fill="rgb(247,166,0)" fg:x="8872" fg:w="8"/><text x="77.7753%" y="255.50"></text></g><g><title>[libnvidia-glcore.so.470.103.01] (8 samples, 0.07%)</title><rect x="77.5253%" y="229" width="0.0699%" height="15" fill="rgb(249,219,21)" fg:x="8872" fg:w="8"/><text x="77.7753%" y="239.50"></text></g><g><title>[libnvidia-glcore.so.470.103.01] (8 samples, 0.07%)</title><rect x="77.5253%" y="213" width="0.0699%" height="15" fill="rgb(205,209,3)" fg:x="8872" fg:w="8"/><text x="77.7753%" y="223.50"></text></g><g><title>[libnvidia-glcore.so.470.103.01] (8 samples, 0.07%)</title><rect x="77.5253%" y="197" width="0.0699%" height="15" fill="rgb(243,44,1)" fg:x="8872" fg:w="8"/><text x="77.7753%" y="207.50"></text></g><g><title>__ioctl (6 samples, 0.05%)</title><rect x="77.5428%" y="181" width="0.0524%" height="15" fill="rgb(206,159,16)" fg:x="8874" fg:w="6"/><text x="77.7928%" y="191.50"></text></g><g><title>[unknown] (6 samples, 0.05%)</title><rect x="77.5428%" y="165" width="0.0524%" height="15" fill="rgb(244,77,30)" fg:x="8874" fg:w="6"/><text x="77.7928%" y="175.50"></text></g><g><title>[unknown] (6 samples, 0.05%)</title><rect x="77.5428%" y="149" width="0.0524%" height="15" fill="rgb(218,69,12)" fg:x="8874" fg:w="6"/><text x="77.7928%" y="159.50"></text></g><g><title>[unknown] (6 samples, 0.05%)</title><rect x="77.5428%" y="133" width="0.0524%" height="15" fill="rgb(212,87,7)" fg:x="8874" fg:w="6"/><text x="77.7928%" y="143.50"></text></g><g><title>[unknown] (6 samples, 0.05%)</title><rect x="77.5428%" y="117" width="0.0524%" height="15" fill="rgb(245,114,25)" fg:x="8874" fg:w="6"/><text x="77.7928%" y="127.50"></text></g><g><title>[unknown] (6 samples, 0.05%)</title><rect x="77.5428%" y="101" width="0.0524%" height="15" fill="rgb(210,61,42)" fg:x="8874" fg:w="6"/><text x="77.7928%" y="111.50"></text></g><g><title>[unknown] (6 samples, 0.05%)</title><rect x="77.5428%" y="85" width="0.0524%" height="15" fill="rgb(211,52,33)" fg:x="8874" fg:w="6"/><text x="77.7928%" y="95.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="77.5516%" y="69" width="0.0437%" height="15" fill="rgb(234,58,33)" fg:x="8875" fg:w="5"/><text x="77.8016%" y="79.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="77.5778%" y="53" width="0.0175%" height="15" fill="rgb(220,115,36)" fg:x="8878" fg:w="2"/><text x="77.8278%" y="63.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="77.5778%" y="37" width="0.0175%" height="15" fill="rgb(243,153,54)" fg:x="8878" fg:w="2"/><text x="77.8278%" y="47.50"></text></g><g><title>[libSDL2-2.0.so.0.10.0] (15 samples, 0.13%)</title><rect x="77.4729%" y="485" width="0.1311%" height="15" fill="rgb(251,47,18)" fg:x="8866" fg:w="15"/><text x="77.7229%" y="495.50"></text></g><g><title>[libSDL2-2.0.so.0.10.0] (15 samples, 0.13%)</title><rect x="77.4729%" y="469" width="0.1311%" height="15" fill="rgb(242,102,42)" fg:x="8866" fg:w="15"/><text x="77.7229%" y="479.50"></text></g><g><title>[libnvidia-glcore.so.470.103.01] (13 samples, 0.11%)</title><rect x="77.4904%" y="453" width="0.1136%" height="15" fill="rgb(234,31,38)" fg:x="8868" fg:w="13"/><text x="77.7404%" y="463.50"></text></g><g><title>[libnvidia-glcore.so.470.103.01] (11 samples, 0.10%)</title><rect x="77.5079%" y="437" width="0.0961%" height="15" fill="rgb(221,117,51)" fg:x="8870" fg:w="11"/><text x="77.7579%" y="447.50"></text></g><g><title>[libnvidia-glcore.so.470.103.01] (11 samples, 0.10%)</title><rect x="77.5079%" y="421" width="0.0961%" height="15" fill="rgb(212,20,18)" fg:x="8870" fg:w="11"/><text x="77.7579%" y="431.50"></text></g><g><title>[libnvidia-glcore.so.470.103.01] (11 samples, 0.10%)</title><rect x="77.5079%" y="405" width="0.0961%" height="15" fill="rgb(245,133,36)" fg:x="8870" fg:w="11"/><text x="77.7579%" y="415.50"></text></g><g><title>[libGLX.so.0.0.0] (3 samples, 0.03%)</title><rect x="77.6040%" y="469" width="0.0262%" height="15" fill="rgb(212,6,19)" fg:x="8881" fg:w="3"/><text x="77.8540%" y="479.50"></text></g><g><title>[libGLX.so.0.0.0] (3 samples, 0.03%)</title><rect x="77.6040%" y="453" width="0.0262%" height="15" fill="rgb(218,1,36)" fg:x="8881" fg:w="3"/><text x="77.8540%" y="463.50"></text></g><g><title>sdl2::render::Canvas&lt;T&gt;::present (86 samples, 0.75%)</title><rect x="76.8962%" y="517" width="0.7515%" height="15" fill="rgb(246,84,54)" fg:x="8800" fg:w="86"/><text x="77.1462%" y="527.50"></text></g><g><title>[libSDL2-2.0.so.0.10.0] (86 samples, 0.75%)</title><rect x="76.8962%" y="501" width="0.7515%" height="15" fill="rgb(242,110,6)" fg:x="8800" fg:w="86"/><text x="77.1462%" y="511.50"></text></g><g><title>glXSwapBuffers (5 samples, 0.04%)</title><rect x="77.6040%" y="485" width="0.0437%" height="15" fill="rgb(214,47,5)" fg:x="8881" fg:w="5"/><text x="77.8540%" y="495.50"></text></g><g><title>[libGLX_nvidia.so.470.103.01] (2 samples, 0.02%)</title><rect x="77.6302%" y="469" width="0.0175%" height="15" fill="rgb(218,159,25)" fg:x="8884" fg:w="2"/><text x="77.8802%" y="479.50"></text></g><g><title>[libSDL2-2.0.so.0.10.0] (3 samples, 0.03%)</title><rect x="77.6477%" y="453" width="0.0262%" height="15" fill="rgb(215,211,28)" fg:x="8886" fg:w="3"/><text x="77.8977%" y="463.50"></text></g><g><title>[libnvidia-glcore.so.470.103.01] (2 samples, 0.02%)</title><rect x="77.6739%" y="373" width="0.0175%" height="15" fill="rgb(238,59,32)" fg:x="8889" fg:w="2"/><text x="77.9239%" y="383.50"></text></g><g><title>[libnvidia-glcore.so.470.103.01] (2 samples, 0.02%)</title><rect x="77.6739%" y="357" width="0.0175%" height="15" fill="rgb(226,82,3)" fg:x="8889" fg:w="2"/><text x="77.9239%" y="367.50"></text></g><g><title>[libnvidia-glcore.so.470.103.01] (3 samples, 0.03%)</title><rect x="77.6739%" y="453" width="0.0262%" height="15" fill="rgb(240,164,32)" fg:x="8889" fg:w="3"/><text x="77.9239%" y="463.50"></text></g><g><title>[libnvidia-glcore.so.470.103.01] (3 samples, 0.03%)</title><rect x="77.6739%" y="437" width="0.0262%" height="15" fill="rgb(232,46,7)" fg:x="8889" fg:w="3"/><text x="77.9239%" y="447.50"></text></g><g><title>[libnvidia-glcore.so.470.103.01] (3 samples, 0.03%)</title><rect x="77.6739%" y="421" width="0.0262%" height="15" fill="rgb(229,129,53)" fg:x="8889" fg:w="3"/><text x="77.9239%" y="431.50"></text></g><g><title>[libnvidia-glcore.so.470.103.01] (3 samples, 0.03%)</title><rect x="77.6739%" y="405" width="0.0262%" height="15" fill="rgb(234,188,29)" fg:x="8889" fg:w="3"/><text x="77.9239%" y="415.50"></text></g><g><title>[libnvidia-glcore.so.470.103.01] (3 samples, 0.03%)</title><rect x="77.6739%" y="389" width="0.0262%" height="15" fill="rgb(246,141,4)" fg:x="8889" fg:w="3"/><text x="77.9239%" y="399.50"></text></g><g><title>sdl2::render::CanvasBuilder::build (7 samples, 0.06%)</title><rect x="77.6477%" y="517" width="0.0612%" height="15" fill="rgb(229,23,39)" fg:x="8886" fg:w="7"/><text x="77.8977%" y="527.50"></text></g><g><title>[libSDL2-2.0.so.0.10.0] (7 samples, 0.06%)</title><rect x="77.6477%" y="501" width="0.0612%" height="15" fill="rgb(206,12,3)" fg:x="8886" fg:w="7"/><text x="77.8977%" y="511.50"></text></g><g><title>[libSDL2-2.0.so.0.10.0] (7 samples, 0.06%)</title><rect x="77.6477%" y="485" width="0.0612%" height="15" fill="rgb(252,226,20)" fg:x="8886" fg:w="7"/><text x="77.8977%" y="495.50"></text></g><g><title>[libSDL2-2.0.so.0.10.0] (7 samples, 0.06%)</title><rect x="77.6477%" y="469" width="0.0612%" height="15" fill="rgb(216,123,35)" fg:x="8886" fg:w="7"/><text x="77.8977%" y="479.50"></text></g><g><title>XSetWMProperties (5 samples, 0.04%)</title><rect x="77.7176%" y="421" width="0.0437%" height="15" fill="rgb(212,68,40)" fg:x="8894" fg:w="5"/><text x="77.9676%" y="431.50"></text></g><g><title>XInternAtom (5 samples, 0.04%)</title><rect x="77.7176%" y="405" width="0.0437%" height="15" fill="rgb(254,125,32)" fg:x="8894" fg:w="5"/><text x="77.9676%" y="415.50"></text></g><g><title>_XReply (5 samples, 0.04%)</title><rect x="77.7176%" y="389" width="0.0437%" height="15" fill="rgb(253,97,22)" fg:x="8894" fg:w="5"/><text x="77.9676%" y="399.50"></text></g><g><title>xcb_wait_for_reply64 (5 samples, 0.04%)</title><rect x="77.7176%" y="373" width="0.0437%" height="15" fill="rgb(241,101,14)" fg:x="8894" fg:w="5"/><text x="77.9676%" y="383.50"></text></g><g><title>[libxcb.so.1.1.0] (5 samples, 0.04%)</title><rect x="77.7176%" y="357" width="0.0437%" height="15" fill="rgb(238,103,29)" fg:x="8894" fg:w="5"/><text x="77.9676%" y="367.50"></text></g><g><title>[libxcb.so.1.1.0] (5 samples, 0.04%)</title><rect x="77.7176%" y="341" width="0.0437%" height="15" fill="rgb(233,195,47)" fg:x="8894" fg:w="5"/><text x="77.9676%" y="351.50"></text></g><g><title>__GI___poll (5 samples, 0.04%)</title><rect x="77.7176%" y="325" width="0.0437%" height="15" fill="rgb(246,218,30)" fg:x="8894" fg:w="5"/><text x="77.9676%" y="335.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="77.7176%" y="309" width="0.0437%" height="15" fill="rgb(219,145,47)" fg:x="8894" fg:w="5"/><text x="77.9676%" y="319.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="77.7176%" y="293" width="0.0437%" height="15" fill="rgb(243,12,26)" fg:x="8894" fg:w="5"/><text x="77.9676%" y="303.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="77.7176%" y="277" width="0.0437%" height="15" fill="rgb(214,87,16)" fg:x="8894" fg:w="5"/><text x="77.9676%" y="287.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="77.7176%" y="261" width="0.0437%" height="15" fill="rgb(208,99,42)" fg:x="8894" fg:w="5"/><text x="77.9676%" y="271.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="77.7176%" y="245" width="0.0437%" height="15" fill="rgb(253,99,2)" fg:x="8894" fg:w="5"/><text x="77.9676%" y="255.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="77.7176%" y="229" width="0.0437%" height="15" fill="rgb(220,168,23)" fg:x="8894" fg:w="5"/><text x="77.9676%" y="239.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="77.7176%" y="213" width="0.0437%" height="15" fill="rgb(242,38,24)" fg:x="8894" fg:w="5"/><text x="77.9676%" y="223.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="77.7176%" y="197" width="0.0437%" height="15" fill="rgb(225,182,9)" fg:x="8894" fg:w="5"/><text x="77.9676%" y="207.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="77.7176%" y="181" width="0.0437%" height="15" fill="rgb(243,178,37)" fg:x="8894" fg:w="5"/><text x="77.9676%" y="191.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="77.7176%" y="165" width="0.0437%" height="15" fill="rgb(232,139,19)" fg:x="8894" fg:w="5"/><text x="77.9676%" y="175.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="77.7176%" y="149" width="0.0437%" height="15" fill="rgb(225,201,24)" fg:x="8894" fg:w="5"/><text x="77.9676%" y="159.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="77.7176%" y="133" width="0.0437%" height="15" fill="rgb(221,47,46)" fg:x="8894" fg:w="5"/><text x="77.9676%" y="143.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="77.7176%" y="117" width="0.0437%" height="15" fill="rgb(249,23,13)" fg:x="8894" fg:w="5"/><text x="77.9676%" y="127.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="77.7176%" y="101" width="0.0437%" height="15" fill="rgb(219,9,5)" fg:x="8894" fg:w="5"/><text x="77.9676%" y="111.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="77.7176%" y="85" width="0.0437%" height="15" fill="rgb(254,171,16)" fg:x="8894" fg:w="5"/><text x="77.9676%" y="95.50"></text></g><g><title>XInternAtom (5 samples, 0.04%)</title><rect x="77.7700%" y="405" width="0.0437%" height="15" fill="rgb(230,171,20)" fg:x="8900" fg:w="5"/><text x="78.0200%" y="415.50"></text></g><g><title>_XReply (5 samples, 0.04%)</title><rect x="77.7700%" y="389" width="0.0437%" height="15" fill="rgb(210,71,41)" fg:x="8900" fg:w="5"/><text x="78.0200%" y="399.50"></text></g><g><title>xcb_wait_for_reply64 (5 samples, 0.04%)</title><rect x="77.7700%" y="373" width="0.0437%" height="15" fill="rgb(206,173,20)" fg:x="8900" fg:w="5"/><text x="78.0200%" y="383.50"></text></g><g><title>[libxcb.so.1.1.0] (5 samples, 0.04%)</title><rect x="77.7700%" y="357" width="0.0437%" height="15" fill="rgb(233,88,34)" fg:x="8900" fg:w="5"/><text x="78.0200%" y="367.50"></text></g><g><title>[libxcb.so.1.1.0] (5 samples, 0.04%)</title><rect x="77.7700%" y="341" width="0.0437%" height="15" fill="rgb(223,209,46)" fg:x="8900" fg:w="5"/><text x="78.0200%" y="351.50"></text></g><g><title>__GI___poll (5 samples, 0.04%)</title><rect x="77.7700%" y="325" width="0.0437%" height="15" fill="rgb(250,43,18)" fg:x="8900" fg:w="5"/><text x="78.0200%" y="335.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="77.7700%" y="309" width="0.0437%" height="15" fill="rgb(208,13,10)" fg:x="8900" fg:w="5"/><text x="78.0200%" y="319.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="77.7700%" y="293" width="0.0437%" height="15" fill="rgb(212,200,36)" fg:x="8900" fg:w="5"/><text x="78.0200%" y="303.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="77.7700%" y="277" width="0.0437%" height="15" fill="rgb(225,90,30)" fg:x="8900" fg:w="5"/><text x="78.0200%" y="287.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="77.7700%" y="261" width="0.0437%" height="15" fill="rgb(236,182,39)" fg:x="8900" fg:w="5"/><text x="78.0200%" y="271.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="77.7700%" y="245" width="0.0437%" height="15" fill="rgb(212,144,35)" fg:x="8900" fg:w="5"/><text x="78.0200%" y="255.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="77.7700%" y="229" width="0.0437%" height="15" fill="rgb(228,63,44)" fg:x="8900" fg:w="5"/><text x="78.0200%" y="239.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="77.7700%" y="213" width="0.0437%" height="15" fill="rgb(228,109,6)" fg:x="8900" fg:w="5"/><text x="78.0200%" y="223.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="77.7700%" y="197" width="0.0437%" height="15" fill="rgb(238,117,24)" fg:x="8900" fg:w="5"/><text x="78.0200%" y="207.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="77.7700%" y="181" width="0.0437%" height="15" fill="rgb(242,26,26)" fg:x="8900" fg:w="5"/><text x="78.0200%" y="191.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="77.7700%" y="165" width="0.0437%" height="15" fill="rgb(221,92,48)" fg:x="8900" fg:w="5"/><text x="78.0200%" y="175.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="77.7700%" y="149" width="0.0437%" height="15" fill="rgb(209,209,32)" fg:x="8900" fg:w="5"/><text x="78.0200%" y="159.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="77.7700%" y="133" width="0.0437%" height="15" fill="rgb(221,70,22)" fg:x="8900" fg:w="5"/><text x="78.0200%" y="143.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="77.7700%" y="117" width="0.0437%" height="15" fill="rgb(248,145,5)" fg:x="8900" fg:w="5"/><text x="78.0200%" y="127.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="77.7700%" y="101" width="0.0437%" height="15" fill="rgb(226,116,26)" fg:x="8900" fg:w="5"/><text x="78.0200%" y="111.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="77.7700%" y="85" width="0.0437%" height="15" fill="rgb(244,5,17)" fg:x="8900" fg:w="5"/><text x="78.0200%" y="95.50"></text></g><g><title>[libnvidia-glcore.so.470.103.01] (3 samples, 0.03%)</title><rect x="77.8399%" y="69" width="0.0262%" height="15" fill="rgb(252,159,33)" fg:x="8908" fg:w="3"/><text x="78.0899%" y="79.50"></text></g><g><title>__ioctl (2 samples, 0.02%)</title><rect x="77.8487%" y="53" width="0.0175%" height="15" fill="rgb(206,71,0)" fg:x="8909" fg:w="2"/><text x="78.0987%" y="63.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="77.8487%" y="37" width="0.0175%" height="15" fill="rgb(233,118,54)" fg:x="8909" fg:w="2"/><text x="78.0987%" y="47.50"></text></g><g><title>[libnvidia-glcore.so.470.103.01] (6 samples, 0.05%)</title><rect x="77.8399%" y="133" width="0.0524%" height="15" fill="rgb(234,83,48)" fg:x="8908" fg:w="6"/><text x="78.0899%" y="143.50"></text></g><g><title>[libnvidia-glcore.so.470.103.01] (6 samples, 0.05%)</title><rect x="77.8399%" y="117" width="0.0524%" height="15" fill="rgb(228,3,54)" fg:x="8908" fg:w="6"/><text x="78.0899%" y="127.50"></text></g><g><title>[libnvidia-glcore.so.470.103.01] (6 samples, 0.05%)</title><rect x="77.8399%" y="101" width="0.0524%" height="15" fill="rgb(226,155,13)" fg:x="8908" fg:w="6"/><text x="78.0899%" y="111.50"></text></g><g><title>[libnvidia-glcore.so.470.103.01] (6 samples, 0.05%)</title><rect x="77.8399%" y="85" width="0.0524%" height="15" fill="rgb(241,28,37)" fg:x="8908" fg:w="6"/><text x="78.0899%" y="95.50"></text></g><g><title>__ioctl (3 samples, 0.03%)</title><rect x="77.8661%" y="69" width="0.0262%" height="15" fill="rgb(233,93,10)" fg:x="8911" fg:w="3"/><text x="78.1161%" y="79.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="77.8661%" y="53" width="0.0262%" height="15" fill="rgb(225,113,19)" fg:x="8911" fg:w="3"/><text x="78.1161%" y="63.50"></text></g><g><title>[libnvidia-glcore.so.470.103.01] (7 samples, 0.06%)</title><rect x="77.8399%" y="149" width="0.0612%" height="15" fill="rgb(241,2,18)" fg:x="8908" fg:w="7"/><text x="78.0899%" y="159.50"></text></g><g><title>[libnvidia-glcore.so.470.103.01] (10 samples, 0.09%)</title><rect x="77.8399%" y="165" width="0.0874%" height="15" fill="rgb(228,207,21)" fg:x="8908" fg:w="10"/><text x="78.0899%" y="175.50"></text></g><g><title>__ioctl (2 samples, 0.02%)</title><rect x="77.9098%" y="149" width="0.0175%" height="15" fill="rgb(213,211,35)" fg:x="8916" fg:w="2"/><text x="78.1598%" y="159.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="77.9098%" y="133" width="0.0175%" height="15" fill="rgb(209,83,10)" fg:x="8916" fg:w="2"/><text x="78.1598%" y="143.50"></text></g><g><title>[libGLX.so.0.0.0] (14 samples, 0.12%)</title><rect x="77.8137%" y="373" width="0.1223%" height="15" fill="rgb(209,164,1)" fg:x="8905" fg:w="14"/><text x="78.0637%" y="383.50"></text></g><g><title>[libGLX_nvidia.so.470.103.01] (14 samples, 0.12%)</title><rect x="77.8137%" y="357" width="0.1223%" height="15" fill="rgb(213,184,43)" fg:x="8905" fg:w="14"/><text x="78.0637%" y="367.50"></text></g><g><title>[libGLX_nvidia.so.470.103.01] (14 samples, 0.12%)</title><rect x="77.8137%" y="341" width="0.1223%" height="15" fill="rgb(231,61,34)" fg:x="8905" fg:w="14"/><text x="78.0637%" y="351.50"></text></g><g><title>[libnvidia-glcore.so.470.103.01] (13 samples, 0.11%)</title><rect x="77.8224%" y="325" width="0.1136%" height="15" fill="rgb(235,75,3)" fg:x="8906" fg:w="13"/><text x="78.0724%" y="335.50"></text></g><g><title>[libnvidia-glcore.so.470.103.01] (13 samples, 0.11%)</title><rect x="77.8224%" y="309" width="0.1136%" height="15" fill="rgb(220,106,47)" fg:x="8906" fg:w="13"/><text x="78.0724%" y="319.50"></text></g><g><title>[libnvidia-glcore.so.470.103.01] (13 samples, 0.11%)</title><rect x="77.8224%" y="293" width="0.1136%" height="15" fill="rgb(210,196,33)" fg:x="8906" fg:w="13"/><text x="78.0724%" y="303.50"></text></g><g><title>[libnvidia-glcore.so.470.103.01] (13 samples, 0.11%)</title><rect x="77.8224%" y="277" width="0.1136%" height="15" fill="rgb(229,154,42)" fg:x="8906" fg:w="13"/><text x="78.0724%" y="287.50"></text></g><g><title>[libnvidia-glcore.so.470.103.01] (13 samples, 0.11%)</title><rect x="77.8224%" y="261" width="0.1136%" height="15" fill="rgb(228,114,26)" fg:x="8906" fg:w="13"/><text x="78.0724%" y="271.50"></text></g><g><title>[libnvidia-glcore.so.470.103.01] (12 samples, 0.10%)</title><rect x="77.8312%" y="245" width="0.1049%" height="15" fill="rgb(208,144,1)" fg:x="8907" fg:w="12"/><text x="78.0812%" y="255.50"></text></g><g><title>[libnvidia-glcore.so.470.103.01] (11 samples, 0.10%)</title><rect x="77.8399%" y="229" width="0.0961%" height="15" fill="rgb(239,112,37)" fg:x="8908" fg:w="11"/><text x="78.0899%" y="239.50"></text></g><g><title>[libnvidia-glcore.so.470.103.01] (11 samples, 0.10%)</title><rect x="77.8399%" y="213" width="0.0961%" height="15" fill="rgb(210,96,50)" fg:x="8908" fg:w="11"/><text x="78.0899%" y="223.50"></text></g><g><title>[libnvidia-glcore.so.470.103.01] (11 samples, 0.10%)</title><rect x="77.8399%" y="197" width="0.0961%" height="15" fill="rgb(222,178,2)" fg:x="8908" fg:w="11"/><text x="78.0899%" y="207.50"></text></g><g><title>[libnvidia-glcore.so.470.103.01] (11 samples, 0.10%)</title><rect x="77.8399%" y="181" width="0.0961%" height="15" fill="rgb(226,74,18)" fg:x="8908" fg:w="11"/><text x="78.0899%" y="191.50"></text></g><g><title>[libGLX_nvidia.so.470.103.01] (2 samples, 0.02%)</title><rect x="77.9448%" y="341" width="0.0175%" height="15" fill="rgb(225,67,54)" fg:x="8920" fg:w="2"/><text x="78.1948%" y="351.50"></text></g><g><title>[libGLX.so.0.0.0] (19 samples, 0.17%)</title><rect x="77.8137%" y="405" width="0.1660%" height="15" fill="rgb(251,92,32)" fg:x="8905" fg:w="19"/><text x="78.0637%" y="415.50"></text></g><g><title>[libGLX.so.0.0.0] (19 samples, 0.17%)</title><rect x="77.8137%" y="389" width="0.1660%" height="15" fill="rgb(228,149,22)" fg:x="8905" fg:w="19"/><text x="78.0637%" y="399.50"></text></g><g><title>__glDispatchMakeCurrent (4 samples, 0.03%)</title><rect x="77.9448%" y="373" width="0.0350%" height="15" fill="rgb(243,54,13)" fg:x="8920" fg:w="4"/><text x="78.1948%" y="383.50"></text></g><g><title>[libGLdispatch.so.0.0.0] (4 samples, 0.03%)</title><rect x="77.9448%" y="357" width="0.0350%" height="15" fill="rgb(243,180,28)" fg:x="8920" fg:w="4"/><text x="78.1948%" y="367.50"></text></g><g><title>glXGetProcAddress (2 samples, 0.02%)</title><rect x="77.9623%" y="341" width="0.0175%" height="15" fill="rgb(208,167,24)" fg:x="8922" fg:w="2"/><text x="78.2123%" y="351.50"></text></g><g><title>[libGLX_nvidia.so.470.103.01] (2 samples, 0.02%)</title><rect x="77.9623%" y="325" width="0.0175%" height="15" fill="rgb(245,73,45)" fg:x="8922" fg:w="2"/><text x="78.2123%" y="335.50"></text></g><g><title>[libGLX_nvidia.so.470.103.01] (2 samples, 0.02%)</title><rect x="77.9623%" y="309" width="0.0175%" height="15" fill="rgb(237,203,48)" fg:x="8922" fg:w="2"/><text x="78.2123%" y="319.50"></text></g><g><title>[libnvidia-glcore.so.470.103.01] (2 samples, 0.02%)</title><rect x="77.9623%" y="293" width="0.0175%" height="15" fill="rgb(211,197,16)" fg:x="8922" fg:w="2"/><text x="78.2123%" y="303.50"></text></g><g><title>syscall (2 samples, 0.02%)</title><rect x="77.9623%" y="277" width="0.0175%" height="15" fill="rgb(243,99,51)" fg:x="8922" fg:w="2"/><text x="78.2123%" y="287.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="77.9623%" y="261" width="0.0175%" height="15" fill="rgb(215,123,29)" fg:x="8922" fg:w="2"/><text x="78.2123%" y="271.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="77.9623%" y="245" width="0.0175%" height="15" fill="rgb(239,186,37)" fg:x="8922" fg:w="2"/><text x="78.2123%" y="255.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="77.9623%" y="229" width="0.0175%" height="15" fill="rgb(252,136,39)" fg:x="8922" fg:w="2"/><text x="78.2123%" y="239.50"></text></g><g><title>[libGLX_nvidia.so.470.103.01] (2 samples, 0.02%)</title><rect x="77.9885%" y="373" width="0.0175%" height="15" fill="rgb(223,213,32)" fg:x="8925" fg:w="2"/><text x="78.2385%" y="383.50"></text></g><g><title>[libGLX_nvidia.so.470.103.01] (2 samples, 0.02%)</title><rect x="77.9885%" y="357" width="0.0175%" height="15" fill="rgb(233,115,5)" fg:x="8925" fg:w="2"/><text x="78.2385%" y="367.50"></text></g><g><title>[libSDL2-2.0.so.0.10.0] (6 samples, 0.05%)</title><rect x="77.9797%" y="405" width="0.0524%" height="15" fill="rgb(207,226,44)" fg:x="8924" fg:w="6"/><text x="78.2297%" y="415.50"></text></g><g><title>glXChooseVisual (6 samples, 0.05%)</title><rect x="77.9797%" y="389" width="0.0524%" height="15" fill="rgb(208,126,0)" fg:x="8924" fg:w="6"/><text x="78.2297%" y="399.50"></text></g><g><title>glXGetConfig (3 samples, 0.03%)</title><rect x="78.0059%" y="373" width="0.0262%" height="15" fill="rgb(244,66,21)" fg:x="8927" fg:w="3"/><text x="78.2559%" y="383.50"></text></g><g><title>[libGLX_nvidia.so.470.103.01] (2 samples, 0.02%)</title><rect x="78.0147%" y="357" width="0.0175%" height="15" fill="rgb(222,97,12)" fg:x="8928" fg:w="2"/><text x="78.2647%" y="367.50"></text></g><g><title>[libGLX_nvidia.so.470.103.01] (2 samples, 0.02%)</title><rect x="78.0147%" y="341" width="0.0175%" height="15" fill="rgb(219,213,19)" fg:x="8928" fg:w="2"/><text x="78.2647%" y="351.50"></text></g><g><title>__GI___poll (2 samples, 0.02%)</title><rect x="78.0147%" y="325" width="0.0175%" height="15" fill="rgb(252,169,30)" fg:x="8928" fg:w="2"/><text x="78.2647%" y="335.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="78.0147%" y="309" width="0.0175%" height="15" fill="rgb(206,32,51)" fg:x="8928" fg:w="2"/><text x="78.2647%" y="319.50"></text></g><g><title>glXChooseVisual (2 samples, 0.02%)</title><rect x="78.0409%" y="405" width="0.0175%" height="15" fill="rgb(250,172,42)" fg:x="8931" fg:w="2"/><text x="78.2909%" y="415.50"></text></g><g><title>glXGetConfig (2 samples, 0.02%)</title><rect x="78.0409%" y="389" width="0.0175%" height="15" fill="rgb(209,34,43)" fg:x="8931" fg:w="2"/><text x="78.2909%" y="399.50"></text></g><g><title>[libGLX_nvidia.so.470.103.01] (2 samples, 0.02%)</title><rect x="78.0409%" y="373" width="0.0175%" height="15" fill="rgb(223,11,35)" fg:x="8931" fg:w="2"/><text x="78.2909%" y="383.50"></text></g><g><title>[libGLX_nvidia.so.470.103.01] (2 samples, 0.02%)</title><rect x="78.0409%" y="357" width="0.0175%" height="15" fill="rgb(251,219,26)" fg:x="8931" fg:w="2"/><text x="78.2909%" y="367.50"></text></g><g><title>[libnvidia-glcore.so.470.103.01] (2 samples, 0.02%)</title><rect x="78.0846%" y="245" width="0.0175%" height="15" fill="rgb(231,119,3)" fg:x="8936" fg:w="2"/><text x="78.3346%" y="255.50"></text></g><g><title>[libnvidia-glcore.so.470.103.01] (5 samples, 0.04%)</title><rect x="78.0671%" y="261" width="0.0437%" height="15" fill="rgb(216,97,11)" fg:x="8934" fg:w="5"/><text x="78.3171%" y="271.50"></text></g><g><title>[libGLX_nvidia.so.470.103.01] (7 samples, 0.06%)</title><rect x="78.0584%" y="341" width="0.0612%" height="15" fill="rgb(223,59,9)" fg:x="8933" fg:w="7"/><text x="78.3084%" y="351.50"></text></g><g><title>[libnvidia-glcore.so.470.103.01] (7 samples, 0.06%)</title><rect x="78.0584%" y="325" width="0.0612%" height="15" fill="rgb(233,93,31)" fg:x="8933" fg:w="7"/><text x="78.3084%" y="335.50"></text></g><g><title>[libnvidia-glcore.so.470.103.01] (7 samples, 0.06%)</title><rect x="78.0584%" y="309" width="0.0612%" height="15" fill="rgb(239,81,33)" fg:x="8933" fg:w="7"/><text x="78.3084%" y="319.50"></text></g><g><title>[libnvidia-glcore.so.470.103.01] (6 samples, 0.05%)</title><rect x="78.0671%" y="293" width="0.0524%" height="15" fill="rgb(213,120,34)" fg:x="8934" fg:w="6"/><text x="78.3171%" y="303.50"></text></g><g><title>[libnvidia-glcore.so.470.103.01] (6 samples, 0.05%)</title><rect x="78.0671%" y="277" width="0.0524%" height="15" fill="rgb(243,49,53)" fg:x="8934" fg:w="6"/><text x="78.3171%" y="287.50"></text></g><g><title>[libSDL2-2.0.so.0.10.0] (41 samples, 0.36%)</title><rect x="77.7700%" y="421" width="0.3583%" height="15" fill="rgb(247,216,33)" fg:x="8900" fg:w="41"/><text x="78.0200%" y="431.50"></text></g><g><title>glXCreateContext (8 samples, 0.07%)</title><rect x="78.0584%" y="405" width="0.0699%" height="15" fill="rgb(226,26,14)" fg:x="8933" fg:w="8"/><text x="78.3084%" y="415.50"></text></g><g><title>glXCreateContext (8 samples, 0.07%)</title><rect x="78.0584%" y="389" width="0.0699%" height="15" fill="rgb(215,49,53)" fg:x="8933" fg:w="8"/><text x="78.3084%" y="399.50"></text></g><g><title>[libGLX_nvidia.so.470.103.01] (8 samples, 0.07%)</title><rect x="78.0584%" y="373" width="0.0699%" height="15" fill="rgb(245,162,40)" fg:x="8933" fg:w="8"/><text x="78.3084%" y="383.50"></text></g><g><title>[libGLX_nvidia.so.470.103.01] (8 samples, 0.07%)</title><rect x="78.0584%" y="357" width="0.0699%" height="15" fill="rgb(229,68,17)" fg:x="8933" fg:w="8"/><text x="78.3084%" y="367.50"></text></g><g><title>sdl2::sdl::Sdl::video (50 samples, 0.44%)</title><rect x="77.7088%" y="517" width="0.4369%" height="15" fill="rgb(213,182,10)" fg:x="8893" fg:w="50"/><text x="77.9588%" y="527.50"></text></g><g><title>sdl2::sdl::VideoSubsystem::new (50 samples, 0.44%)</title><rect x="77.7088%" y="501" width="0.4369%" height="15" fill="rgb(245,125,30)" fg:x="8893" fg:w="50"/><text x="77.9588%" y="511.50"></text></g><g><title>[libSDL2-2.0.so.0.10.0] (50 samples, 0.44%)</title><rect x="77.7088%" y="485" width="0.4369%" height="15" fill="rgb(232,202,2)" fg:x="8893" fg:w="50"/><text x="77.9588%" y="495.50"></text></g><g><title>[libSDL2-2.0.so.0.10.0] (50 samples, 0.44%)</title><rect x="77.7088%" y="469" width="0.4369%" height="15" fill="rgb(237,140,51)" fg:x="8893" fg:w="50"/><text x="77.9588%" y="479.50"></text></g><g><title>[libSDL2-2.0.so.0.10.0] (50 samples, 0.44%)</title><rect x="77.7088%" y="453" width="0.4369%" height="15" fill="rgb(236,157,25)" fg:x="8893" fg:w="50"/><text x="77.9588%" y="463.50"></text></g><g><title>[libSDL2-2.0.so.0.10.0] (50 samples, 0.44%)</title><rect x="77.7088%" y="437" width="0.4369%" height="15" fill="rgb(219,209,0)" fg:x="8893" fg:w="50"/><text x="77.9588%" y="447.50"></text></g><g><title>[libGLX_nvidia.so.470.103.01] (2 samples, 0.02%)</title><rect x="78.1458%" y="373" width="0.0175%" height="15" fill="rgb(240,116,54)" fg:x="8943" fg:w="2"/><text x="78.3958%" y="383.50"></text></g><g><title>[libnvidia-glcore.so.470.103.01] (2 samples, 0.02%)</title><rect x="78.1458%" y="357" width="0.0175%" height="15" fill="rgb(216,10,36)" fg:x="8943" fg:w="2"/><text x="78.3958%" y="367.50"></text></g><g><title>[libGLX.so.0.0.0] (3 samples, 0.03%)</title><rect x="78.1458%" y="453" width="0.0262%" height="15" fill="rgb(222,72,44)" fg:x="8943" fg:w="3"/><text x="78.3958%" y="463.50"></text></g><g><title>[libGLX.so.0.0.0] (3 samples, 0.03%)</title><rect x="78.1458%" y="437" width="0.0262%" height="15" fill="rgb(232,159,9)" fg:x="8943" fg:w="3"/><text x="78.3958%" y="447.50"></text></g><g><title>[libGLX.so.0.0.0] (3 samples, 0.03%)</title><rect x="78.1458%" y="421" width="0.0262%" height="15" fill="rgb(210,39,32)" fg:x="8943" fg:w="3"/><text x="78.3958%" y="431.50"></text></g><g><title>[libGLX_nvidia.so.470.103.01] (3 samples, 0.03%)</title><rect x="78.1458%" y="405" width="0.0262%" height="15" fill="rgb(216,194,45)" fg:x="8943" fg:w="3"/><text x="78.3958%" y="415.50"></text></g><g><title>[libGLX_nvidia.so.470.103.01] (3 samples, 0.03%)</title><rect x="78.1458%" y="389" width="0.0262%" height="15" fill="rgb(218,18,35)" fg:x="8943" fg:w="3"/><text x="78.3958%" y="399.50"></text></g><g><title>sdl2::video::WindowBuilder::build (11 samples, 0.10%)</title><rect x="78.1458%" y="517" width="0.0961%" height="15" fill="rgb(207,83,51)" fg:x="8943" fg:w="11"/><text x="78.3958%" y="527.50"></text></g><g><title>[libSDL2-2.0.so.0.10.0] (11 samples, 0.10%)</title><rect x="78.1458%" y="501" width="0.0961%" height="15" fill="rgb(225,63,43)" fg:x="8943" fg:w="11"/><text x="78.3958%" y="511.50"></text></g><g><title>[libSDL2-2.0.so.0.10.0] (11 samples, 0.10%)</title><rect x="78.1458%" y="485" width="0.0961%" height="15" fill="rgb(207,57,36)" fg:x="8943" fg:w="11"/><text x="78.3958%" y="495.50"></text></g><g><title>[libSDL2-2.0.so.0.10.0] (11 samples, 0.10%)</title><rect x="78.1458%" y="469" width="0.0961%" height="15" fill="rgb(216,99,33)" fg:x="8943" fg:w="11"/><text x="78.3958%" y="479.50"></text></g><g><title>glXCreateContext (6 samples, 0.05%)</title><rect x="78.1894%" y="453" width="0.0524%" height="15" fill="rgb(225,42,16)" fg:x="8948" fg:w="6"/><text x="78.4394%" y="463.50"></text></g><g><title>glXCreateContext (6 samples, 0.05%)</title><rect x="78.1894%" y="437" width="0.0524%" height="15" fill="rgb(220,201,45)" fg:x="8948" fg:w="6"/><text x="78.4394%" y="447.50"></text></g><g><title>[libGLX_nvidia.so.470.103.01] (6 samples, 0.05%)</title><rect x="78.1894%" y="421" width="0.0524%" height="15" fill="rgb(225,33,4)" fg:x="8948" fg:w="6"/><text x="78.4394%" y="431.50"></text></g><g><title>XSync (6 samples, 0.05%)</title><rect x="78.1894%" y="405" width="0.0524%" height="15" fill="rgb(224,33,50)" fg:x="8948" fg:w="6"/><text x="78.4394%" y="415.50"></text></g><g><title>_XReply (6 samples, 0.05%)</title><rect x="78.1894%" y="389" width="0.0524%" height="15" fill="rgb(246,198,51)" fg:x="8948" fg:w="6"/><text x="78.4394%" y="399.50"></text></g><g><title>xcb_wait_for_reply64 (6 samples, 0.05%)</title><rect x="78.1894%" y="373" width="0.0524%" height="15" fill="rgb(205,22,4)" fg:x="8948" fg:w="6"/><text x="78.4394%" y="383.50"></text></g><g><title>[libxcb.so.1.1.0] (6 samples, 0.05%)</title><rect x="78.1894%" y="357" width="0.0524%" height="15" fill="rgb(206,3,8)" fg:x="8948" fg:w="6"/><text x="78.4394%" y="367.50"></text></g><g><title>[libxcb.so.1.1.0] (6 samples, 0.05%)</title><rect x="78.1894%" y="341" width="0.0524%" height="15" fill="rgb(251,23,15)" fg:x="8948" fg:w="6"/><text x="78.4394%" y="351.50"></text></g><g><title>__GI___poll (6 samples, 0.05%)</title><rect x="78.1894%" y="325" width="0.0524%" height="15" fill="rgb(252,88,28)" fg:x="8948" fg:w="6"/><text x="78.4394%" y="335.50"></text></g><g><title>[unknown] (6 samples, 0.05%)</title><rect x="78.1894%" y="309" width="0.0524%" height="15" fill="rgb(212,127,14)" fg:x="8948" fg:w="6"/><text x="78.4394%" y="319.50"></text></g><g><title>[unknown] (6 samples, 0.05%)</title><rect x="78.1894%" y="293" width="0.0524%" height="15" fill="rgb(247,145,37)" fg:x="8948" fg:w="6"/><text x="78.4394%" y="303.50"></text></g><g><title>[unknown] (6 samples, 0.05%)</title><rect x="78.1894%" y="277" width="0.0524%" height="15" fill="rgb(209,117,53)" fg:x="8948" fg:w="6"/><text x="78.4394%" y="287.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="78.1982%" y="261" width="0.0437%" height="15" fill="rgb(212,90,42)" fg:x="8949" fg:w="5"/><text x="78.4482%" y="271.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="78.1982%" y="245" width="0.0437%" height="15" fill="rgb(218,164,37)" fg:x="8949" fg:w="5"/><text x="78.4482%" y="255.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="78.1982%" y="229" width="0.0437%" height="15" fill="rgb(246,65,34)" fg:x="8949" fg:w="5"/><text x="78.4482%" y="239.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="78.1982%" y="213" width="0.0437%" height="15" fill="rgb(231,100,33)" fg:x="8949" fg:w="5"/><text x="78.4482%" y="223.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="78.1982%" y="197" width="0.0437%" height="15" fill="rgb(228,126,14)" fg:x="8949" fg:w="5"/><text x="78.4482%" y="207.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="78.1982%" y="181" width="0.0437%" height="15" fill="rgb(215,173,21)" fg:x="8949" fg:w="5"/><text x="78.4482%" y="191.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="78.1982%" y="165" width="0.0437%" height="15" fill="rgb(210,6,40)" fg:x="8949" fg:w="5"/><text x="78.4482%" y="175.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="78.1982%" y="149" width="0.0437%" height="15" fill="rgb(212,48,18)" fg:x="8949" fg:w="5"/><text x="78.4482%" y="159.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="78.1982%" y="133" width="0.0437%" height="15" fill="rgb(230,214,11)" fg:x="8949" fg:w="5"/><text x="78.4482%" y="143.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="78.1982%" y="117" width="0.0437%" height="15" fill="rgb(254,105,39)" fg:x="8949" fg:w="5"/><text x="78.4482%" y="127.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="78.1982%" y="101" width="0.0437%" height="15" fill="rgb(245,158,5)" fg:x="8949" fg:w="5"/><text x="78.4482%" y="111.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="78.1982%" y="85" width="0.0437%" height="15" fill="rgb(249,208,11)" fg:x="8949" fg:w="5"/><text x="78.4482%" y="95.50"></text></g><g><title>nand2tetris::main (9,553 samples, 83.48%)</title><rect x="8.8955%" y="549" width="83.4761%" height="15" fill="rgb(210,39,28)" fg:x="1018" fg:w="9553"/><text x="9.1455%" y="559.50">nand2tetris::main</text></g><g><title>nand2tetris::run_vm (9,553 samples, 83.48%)</title><rect x="8.8955%" y="533" width="83.4761%" height="15" fill="rgb(211,56,53)" fg:x="1018" fg:w="9553"/><text x="9.1455%" y="543.50">nand2tetris::run_vm</text></g><g><title>std::time::Instant::now (1,617 samples, 14.13%)</title><rect x="78.2419%" y="517" width="14.1297%" height="15" fill="rgb(226,201,30)" fg:x="8954" fg:w="1617"/><text x="78.4919%" y="527.50">std::time::Instant::n..</text></g><g><title>std::sys::unix::time::inner::Instant::now (1,617 samples, 14.13%)</title><rect x="78.2419%" y="501" width="14.1297%" height="15" fill="rgb(239,101,34)" fg:x="8954" fg:w="1617"/><text x="78.4919%" y="511.50">std::sys::unix::time:..</text></g><g><title>std::sys::unix::time::inner::now (1,617 samples, 14.13%)</title><rect x="78.2419%" y="485" width="14.1297%" height="15" fill="rgb(226,209,5)" fg:x="8954" fg:w="1617"/><text x="78.4919%" y="495.50">std::sys::unix::time:..</text></g><g><title>__GI___clock_gettime (1,486 samples, 12.98%)</title><rect x="79.3866%" y="469" width="12.9850%" height="15" fill="rgb(250,105,47)" fg:x="9085" fg:w="1486"/><text x="79.6366%" y="479.50">__GI___clock_gettime</text></g><g><title>__vdso_clock_gettime (1,257 samples, 10.98%)</title><rect x="81.3876%" y="453" width="10.9839%" height="15" fill="rgb(230,72,3)" fg:x="9314" fg:w="1257"/><text x="81.6376%" y="463.50">__vdso_clock_get..</text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="92.3453%" y="437" width="0.0262%" height="15" fill="rgb(232,218,39)" fg:x="10568" fg:w="3"/><text x="92.5953%" y="447.50"></text></g><g><title>nand2tetris::vm::&lt;impl nand2tetris::hardware::RAM&gt;::get (3 samples, 0.03%)</title><rect x="92.3715%" y="549" width="0.0262%" height="15" fill="rgb(248,166,6)" fg:x="10571" fg:w="3"/><text x="92.6215%" y="559.50"></text></g><g><title>nand2tetris::vm::&lt;impl nand2tetris::hardware::RAM&gt;::set (3 samples, 0.03%)</title><rect x="92.3978%" y="549" width="0.0262%" height="15" fill="rgb(247,89,20)" fg:x="10574" fg:w="3"/><text x="92.6478%" y="559.50"></text></g><g><title>hashbrown::map::make_hash (4 samples, 0.03%)</title><rect x="92.6075%" y="469" width="0.0350%" height="15" fill="rgb(248,130,54)" fg:x="10598" fg:w="4"/><text x="92.8575%" y="479.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (8 samples, 0.07%)</title><rect x="92.6075%" y="533" width="0.0699%" height="15" fill="rgb(234,196,4)" fg:x="10598" fg:w="8"/><text x="92.8575%" y="543.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (8 samples, 0.07%)</title><rect x="92.6075%" y="517" width="0.0699%" height="15" fill="rgb(250,143,31)" fg:x="10598" fg:w="8"/><text x="92.8575%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (8 samples, 0.07%)</title><rect x="92.6075%" y="501" width="0.0699%" height="15" fill="rgb(211,110,34)" fg:x="10598" fg:w="8"/><text x="92.8575%" y="511.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (8 samples, 0.07%)</title><rect x="92.6075%" y="485" width="0.0699%" height="15" fill="rgb(215,124,48)" fg:x="10598" fg:w="8"/><text x="92.8575%" y="495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (4 samples, 0.03%)</title><rect x="92.6424%" y="469" width="0.0350%" height="15" fill="rgb(216,46,13)" fg:x="10602" fg:w="4"/><text x="92.8924%" y="479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (4 samples, 0.03%)</title><rect x="92.6424%" y="453" width="0.0350%" height="15" fill="rgb(205,184,25)" fg:x="10602" fg:w="4"/><text x="92.8924%" y="463.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (4 samples, 0.03%)</title><rect x="92.6424%" y="437" width="0.0350%" height="15" fill="rgb(228,1,10)" fg:x="10602" fg:w="4"/><text x="92.8924%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (4 samples, 0.03%)</title><rect x="92.6424%" y="421" width="0.0350%" height="15" fill="rgb(213,116,27)" fg:x="10602" fg:w="4"/><text x="92.8924%" y="431.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (4 samples, 0.03%)</title><rect x="92.6424%" y="405" width="0.0350%" height="15" fill="rgb(241,95,50)" fg:x="10602" fg:w="4"/><text x="92.8924%" y="415.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialEq for (A,B)&gt;::eq (4 samples, 0.03%)</title><rect x="92.6424%" y="389" width="0.0350%" height="15" fill="rgb(238,48,32)" fg:x="10602" fg:w="4"/><text x="92.8924%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (4 samples, 0.03%)</title><rect x="92.6424%" y="373" width="0.0350%" height="15" fill="rgb(235,113,49)" fg:x="10602" fg:w="4"/><text x="92.8924%" y="383.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (4 samples, 0.03%)</title><rect x="92.6424%" y="357" width="0.0350%" height="15" fill="rgb(205,127,43)" fg:x="10602" fg:w="4"/><text x="92.8924%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (4 samples, 0.03%)</title><rect x="92.6424%" y="341" width="0.0350%" height="15" fill="rgb(250,162,2)" fg:x="10602" fg:w="4"/><text x="92.8924%" y="351.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (4 samples, 0.03%)</title><rect x="92.6424%" y="325" width="0.0350%" height="15" fill="rgb(220,13,41)" fg:x="10602" fg:w="4"/><text x="92.8924%" y="335.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (4 samples, 0.03%)</title><rect x="92.6424%" y="309" width="0.0350%" height="15" fill="rgb(249,221,25)" fg:x="10602" fg:w="4"/><text x="92.8924%" y="319.50"></text></g><g><title>nand2tetris::vm::VM::goto (30 samples, 0.26%)</title><rect x="92.4240%" y="549" width="0.2621%" height="15" fill="rgb(215,208,19)" fg:x="10577" fg:w="30"/><text x="92.6740%" y="559.50"></text></g><g><title>hashbrown::map::make_hash (117 samples, 1.02%)</title><rect x="94.4949%" y="469" width="1.0224%" height="15" fill="rgb(236,175,2)" fg:x="10814" fg:w="117"/><text x="94.7449%" y="479.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (143 samples, 1.25%)</title><rect x="94.4949%" y="533" width="1.2496%" height="15" fill="rgb(241,52,2)" fg:x="10814" fg:w="143"/><text x="94.7449%" y="543.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (143 samples, 1.25%)</title><rect x="94.4949%" y="517" width="1.2496%" height="15" fill="rgb(248,140,14)" fg:x="10814" fg:w="143"/><text x="94.7449%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (143 samples, 1.25%)</title><rect x="94.4949%" y="501" width="1.2496%" height="15" fill="rgb(253,22,42)" fg:x="10814" fg:w="143"/><text x="94.7449%" y="511.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (143 samples, 1.25%)</title><rect x="94.4949%" y="485" width="1.2496%" height="15" fill="rgb(234,61,47)" fg:x="10814" fg:w="143"/><text x="94.7449%" y="495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (26 samples, 0.23%)</title><rect x="95.5173%" y="469" width="0.2272%" height="15" fill="rgb(208,226,15)" fg:x="10931" fg:w="26"/><text x="95.7673%" y="479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (26 samples, 0.23%)</title><rect x="95.5173%" y="453" width="0.2272%" height="15" fill="rgb(217,221,4)" fg:x="10931" fg:w="26"/><text x="95.7673%" y="463.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (26 samples, 0.23%)</title><rect x="95.5173%" y="437" width="0.2272%" height="15" fill="rgb(212,174,34)" fg:x="10931" fg:w="26"/><text x="95.7673%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (26 samples, 0.23%)</title><rect x="95.5173%" y="421" width="0.2272%" height="15" fill="rgb(253,83,4)" fg:x="10931" fg:w="26"/><text x="95.7673%" y="431.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (26 samples, 0.23%)</title><rect x="95.5173%" y="405" width="0.2272%" height="15" fill="rgb(250,195,49)" fg:x="10931" fg:w="26"/><text x="95.7673%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (26 samples, 0.23%)</title><rect x="95.5173%" y="389" width="0.2272%" height="15" fill="rgb(241,192,25)" fg:x="10931" fg:w="26"/><text x="95.7673%" y="399.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (26 samples, 0.23%)</title><rect x="95.5173%" y="373" width="0.2272%" height="15" fill="rgb(208,124,10)" fg:x="10931" fg:w="26"/><text x="95.7673%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (26 samples, 0.23%)</title><rect x="95.5173%" y="357" width="0.2272%" height="15" fill="rgb(222,33,0)" fg:x="10931" fg:w="26"/><text x="95.7673%" y="367.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (26 samples, 0.23%)</title><rect x="95.5173%" y="341" width="0.2272%" height="15" fill="rgb(234,209,28)" fg:x="10931" fg:w="26"/><text x="95.7673%" y="351.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (26 samples, 0.23%)</title><rect x="95.5173%" y="325" width="0.2272%" height="15" fill="rgb(224,11,23)" fg:x="10931" fg:w="26"/><text x="95.7673%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (11 samples, 0.10%)</title><rect x="95.7445%" y="437" width="0.0961%" height="15" fill="rgb(232,99,1)" fg:x="10957" fg:w="11"/><text x="95.9945%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (11 samples, 0.10%)</title><rect x="95.7445%" y="421" width="0.0961%" height="15" fill="rgb(237,95,45)" fg:x="10957" fg:w="11"/><text x="95.9945%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (11 samples, 0.10%)</title><rect x="95.7445%" y="405" width="0.0961%" height="15" fill="rgb(208,109,11)" fg:x="10957" fg:w="11"/><text x="95.9945%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (11 samples, 0.10%)</title><rect x="95.7445%" y="389" width="0.0961%" height="15" fill="rgb(216,190,48)" fg:x="10957" fg:w="11"/><text x="95.9945%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (11 samples, 0.10%)</title><rect x="95.7445%" y="373" width="0.0961%" height="15" fill="rgb(251,171,36)" fg:x="10957" fg:w="11"/><text x="95.9945%" y="383.50"></text></g><g><title>alloc::alloc::alloc (11 samples, 0.10%)</title><rect x="95.7445%" y="357" width="0.0961%" height="15" fill="rgb(230,62,22)" fg:x="10957" fg:w="11"/><text x="95.9945%" y="367.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (12 samples, 0.10%)</title><rect x="95.7445%" y="533" width="0.1049%" height="15" fill="rgb(225,114,35)" fg:x="10957" fg:w="12"/><text x="95.9945%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (12 samples, 0.10%)</title><rect x="95.7445%" y="517" width="0.1049%" height="15" fill="rgb(215,118,42)" fg:x="10957" fg:w="12"/><text x="95.9945%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (12 samples, 0.10%)</title><rect x="95.7445%" y="501" width="0.1049%" height="15" fill="rgb(243,119,21)" fg:x="10957" fg:w="12"/><text x="95.9945%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (12 samples, 0.10%)</title><rect x="95.7445%" y="485" width="0.1049%" height="15" fill="rgb(252,177,53)" fg:x="10957" fg:w="12"/><text x="95.9945%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (12 samples, 0.10%)</title><rect x="95.7445%" y="469" width="0.1049%" height="15" fill="rgb(237,209,29)" fg:x="10957" fg:w="12"/><text x="95.9945%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (12 samples, 0.10%)</title><rect x="95.7445%" y="453" width="0.1049%" height="15" fill="rgb(212,65,23)" fg:x="10957" fg:w="12"/><text x="95.9945%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (4 samples, 0.03%)</title><rect x="95.8494%" y="533" width="0.0350%" height="15" fill="rgb(230,222,46)" fg:x="10969" fg:w="4"/><text x="96.0994%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (4 samples, 0.03%)</title><rect x="95.8494%" y="517" width="0.0350%" height="15" fill="rgb(215,135,32)" fg:x="10969" fg:w="4"/><text x="96.0994%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (4 samples, 0.03%)</title><rect x="95.8494%" y="501" width="0.0350%" height="15" fill="rgb(246,101,22)" fg:x="10969" fg:w="4"/><text x="96.0994%" y="511.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.03%)</title><rect x="95.8494%" y="485" width="0.0350%" height="15" fill="rgb(206,107,13)" fg:x="10969" fg:w="4"/><text x="96.0994%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (4 samples, 0.03%)</title><rect x="95.8494%" y="469" width="0.0350%" height="15" fill="rgb(250,100,44)" fg:x="10969" fg:w="4"/><text x="96.0994%" y="479.50"></text></g><g><title>alloc::alloc::dealloc (4 samples, 0.03%)</title><rect x="95.8494%" y="453" width="0.0350%" height="15" fill="rgb(231,147,38)" fg:x="10969" fg:w="4"/><text x="96.0994%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;nand2tetris::vm::Frame&gt;&gt; (5 samples, 0.04%)</title><rect x="95.8843%" y="533" width="0.0437%" height="15" fill="rgb(229,8,40)" fg:x="10973" fg:w="5"/><text x="96.1343%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;nand2tetris::vm::Frame&gt; (5 samples, 0.04%)</title><rect x="95.8843%" y="517" width="0.0437%" height="15" fill="rgb(221,135,30)" fg:x="10973" fg:w="5"/><text x="96.1343%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (5 samples, 0.04%)</title><rect x="95.8843%" y="501" width="0.0437%" height="15" fill="rgb(249,193,18)" fg:x="10973" fg:w="5"/><text x="96.1343%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (5 samples, 0.04%)</title><rect x="95.8843%" y="485" width="0.0437%" height="15" fill="rgb(209,133,39)" fg:x="10973" fg:w="5"/><text x="96.1343%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (5 samples, 0.04%)</title><rect x="95.8843%" y="469" width="0.0437%" height="15" fill="rgb(232,100,14)" fg:x="10973" fg:w="5"/><text x="96.1343%" y="479.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.04%)</title><rect x="95.8843%" y="453" width="0.0437%" height="15" fill="rgb(224,185,1)" fg:x="10973" fg:w="5"/><text x="96.1343%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (5 samples, 0.04%)</title><rect x="95.8843%" y="437" width="0.0437%" height="15" fill="rgb(223,139,8)" fg:x="10973" fg:w="5"/><text x="96.1343%" y="447.50"></text></g><g><title>alloc::alloc::dealloc (5 samples, 0.04%)</title><rect x="95.8843%" y="421" width="0.0437%" height="15" fill="rgb(232,213,38)" fg:x="10973" fg:w="5"/><text x="96.1343%" y="431.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::last (203 samples, 1.77%)</title><rect x="95.9280%" y="533" width="1.7739%" height="15" fill="rgb(207,94,22)" fg:x="10978" fg:w="203"/><text x="96.1780%" y="543.50">c..</text></g><g><title>nand2tetris::vm::VM::step (577 samples, 5.04%)</title><rect x="92.6861%" y="549" width="5.0419%" height="15" fill="rgb(219,183,54)" fg:x="10607" fg:w="577"/><text x="92.9361%" y="559.50">nand2t..</text></g><g><title>core::str::&lt;impl str&gt;::split_once (3 samples, 0.03%)</title><rect x="97.7019%" y="533" width="0.0262%" height="15" fill="rgb(216,185,54)" fg:x="11181" fg:w="3"/><text x="97.9519%" y="543.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (3 samples, 0.03%)</title><rect x="97.7019%" y="517" width="0.0262%" height="15" fill="rgb(254,217,39)" fg:x="11181" fg:w="3"/><text x="97.9519%" y="527.50"></text></g><g><title>core::slice::memchr::memchr (3 samples, 0.03%)</title><rect x="97.7019%" y="501" width="0.0262%" height="15" fill="rgb(240,178,23)" fg:x="11181" fg:w="3"/><text x="97.9519%" y="511.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (77 samples, 0.67%)</title><rect x="97.7368%" y="549" width="0.6728%" height="15" fill="rgb(218,11,47)" fg:x="11185" fg:w="77"/><text x="97.9868%" y="559.50"></text></g><g><title>[unknown] (10,727 samples, 93.73%)</title><rect x="5.6187%" y="565" width="93.7347%" height="15" fill="rgb(218,51,51)" fg:x="643" fg:w="10727"/><text x="5.8687%" y="575.50">[unknown]</text></g><g><title>std::time::Instant::now (108 samples, 0.94%)</title><rect x="98.4096%" y="549" width="0.9437%" height="15" fill="rgb(238,126,27)" fg:x="11262" fg:w="108"/><text x="98.6596%" y="559.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (51 samples, 0.45%)</title><rect x="98.9077%" y="533" width="0.4456%" height="15" fill="rgb(249,202,22)" fg:x="11319" fg:w="51"/><text x="99.1577%" y="543.50"></text></g><g><title>std::sys::unix::time::inner::now (51 samples, 0.45%)</title><rect x="98.9077%" y="517" width="0.4456%" height="15" fill="rgb(254,195,49)" fg:x="11319" fg:w="51"/><text x="99.1577%" y="527.50"></text></g><g><title>__vdso_clock_gettime (67 samples, 0.59%)</title><rect x="99.3534%" y="565" width="0.5855%" height="15" fill="rgb(208,123,14)" fg:x="11370" fg:w="67"/><text x="99.6034%" y="575.50"></text></g><g><title>nand2tetris (11,439 samples, 99.96%)</title><rect x="0.0000%" y="581" width="99.9563%" height="15" fill="rgb(224,200,8)" fg:x="0" fg:w="11439"/><text x="0.2500%" y="591.50">nand2tetris</text></g><g><title>_start (2 samples, 0.02%)</title><rect x="99.9388%" y="565" width="0.0175%" height="15" fill="rgb(217,61,36)" fg:x="11437" fg:w="2"/><text x="100.1888%" y="575.50"></text></g><g><title>all (11,444 samples, 100%)</title><rect x="0.0000%" y="597" width="100.0000%" height="15" fill="rgb(206,35,45)" fg:x="0" fg:w="11444"/><text x="0.2500%" y="607.50"></text></g><g><title>perf-exec (5 samples, 0.04%)</title><rect x="99.9563%" y="581" width="0.0437%" height="15" fill="rgb(217,65,33)" fg:x="11439" fg:w="5"/><text x="100.2063%" y="591.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="99.9563%" y="565" width="0.0437%" height="15" fill="rgb(222,158,48)" fg:x="11439" fg:w="5"/><text x="100.2063%" y="575.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="99.9563%" y="549" width="0.0437%" height="15" fill="rgb(254,2,54)" fg:x="11439" fg:w="5"/><text x="100.2063%" y="559.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="99.9563%" y="533" width="0.0437%" height="15" fill="rgb(250,143,38)" fg:x="11439" fg:w="5"/><text x="100.2063%" y="543.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="99.9563%" y="517" width="0.0437%" height="15" fill="rgb(248,25,0)" fg:x="11439" fg:w="5"/><text x="100.2063%" y="527.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="99.9563%" y="501" width="0.0437%" height="15" fill="rgb(206,152,27)" fg:x="11439" fg:w="5"/><text x="100.2063%" y="511.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="99.9563%" y="485" width="0.0437%" height="15" fill="rgb(240,77,30)" fg:x="11439" fg:w="5"/><text x="100.2063%" y="495.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="99.9563%" y="469" width="0.0437%" height="15" fill="rgb(231,5,3)" fg:x="11439" fg:w="5"/><text x="100.2063%" y="479.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="99.9563%" y="453" width="0.0437%" height="15" fill="rgb(207,226,32)" fg:x="11439" fg:w="5"/><text x="100.2063%" y="463.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="99.9563%" y="437" width="0.0437%" height="15" fill="rgb(222,207,47)" fg:x="11439" fg:w="5"/><text x="100.2063%" y="447.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="99.9563%" y="421" width="0.0437%" height="15" fill="rgb(229,115,45)" fg:x="11439" fg:w="5"/><text x="100.2063%" y="431.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="99.9563%" y="405" width="0.0437%" height="15" fill="rgb(224,191,6)" fg:x="11439" fg:w="5"/><text x="100.2063%" y="415.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="99.9563%" y="389" width="0.0437%" height="15" fill="rgb(230,227,24)" fg:x="11439" fg:w="5"/><text x="100.2063%" y="399.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="99.9563%" y="373" width="0.0437%" height="15" fill="rgb(228,80,19)" fg:x="11439" fg:w="5"/><text x="100.2063%" y="383.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="99.9563%" y="357" width="0.0437%" height="15" fill="rgb(247,229,0)" fg:x="11439" fg:w="5"/><text x="100.2063%" y="367.50"></text></g></svg></svg>