function Int32.initialize 0
push constant 15
call Array.new 1
pop static 1
push constant 0
push static 1
add
push constant 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 1
push static 1
add
push constant 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 2
push static 1
add
push constant 4
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 3
push static 1
add
push constant 8
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 4
push static 1
add
push constant 16
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 5
push static 1
add
push constant 32
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 6
push static 1
add
push constant 64
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 7
push static 1
add
push constant 128
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 8
push static 1
add
push constant 256
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 9
push static 1
add
push constant 512
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 10
push static 1
add
push constant 1024
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 11
push static 1
add
push constant 2048
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 12
push static 1
add
push constant 4096
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 13
push static 1
add
push constant 8192
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 14
push static 1
add
push constant 16384
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return
function Int32.arith_rightshift 3
push argument 0
push constant 0
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
return
label IF_FALSE0
push argument 1
push constant 0
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push argument 0
return
label IF_FALSE1
push argument 0
push constant 0
gt
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push argument 0
push argument 1
push static 1
add
pop pointer 1
push that 0
call Math.divide 2
pop local 0
goto IF_END2
label IF_FALSE2
push argument 0
pop local 0
push constant 0
pop local 1
label WHILE_EXP0
push local 1
push argument 1
lt
not
if-goto WHILE_END0
push local 0
push constant 2
call Math.divide 2
pop local 2
push local 0
push constant 1
and
push constant 0
eq
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push local 2
pop local 0
goto IF_END3
label IF_FALSE3
push local 2
push constant 1
sub
pop local 0
label IF_END3
push local 0
push constant 1
neg
eq
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push local 0
return
label IF_FALSE4
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP0
label WHILE_END0
label IF_END2
push local 0
return
function Int32.leftshift 2
push argument 0
pop local 0
push constant 0
pop local 1
label WHILE_EXP0
push local 1
push argument 1
lt
not
if-goto WHILE_END0
push local 0
push constant 2
call Math.multiply 2
pop local 0
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP0
label WHILE_END0
push local 0
return
function Int32.u4_array_mul_u4_array 6
push constant 16
call Array.new 1
pop local 0
push constant 0
pop local 3
label WHILE_EXP0
push local 3
push constant 16
lt
not
if-goto WHILE_END0
push local 3
push local 0
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 3
push constant 1
add
pop local 3
goto WHILE_EXP0
label WHILE_END0
push constant 0
pop local 1
label WHILE_EXP1
push local 1
push constant 8
lt
not
if-goto WHILE_END1
push constant 0
pop local 2
push local 1
push argument 1
add
pop pointer 1
push that 0
pop local 5
push constant 0
pop local 3
label WHILE_EXP2
push local 3
push constant 8
lt
not
if-goto WHILE_END2
push local 3
push argument 0
add
pop pointer 1
push that 0
push local 5
call Math.multiply 2
push local 3
push local 1
add
push local 0
add
pop pointer 1
push that 0
add
push local 2
add
pop local 4
push local 3
push local 1
add
push local 0
add
push local 4
push constant 15
and
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 4
push constant 4
call Int32.arith_rightshift 2
pop local 2
push local 3
push constant 1
add
pop local 3
goto WHILE_EXP2
label WHILE_END2
push local 1
push constant 8
add
push local 0
add
push local 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP1
label WHILE_END1
push local 0
return
function Int32.nlz_u4 2
push constant 0
pop local 0
push constant 3
pop local 1
label WHILE_EXP0
push local 1
push constant 0
gt
push local 1
push constant 0
eq
or
not
if-goto WHILE_END0
push argument 0
push local 1
call Int32.arith_rightshift 2
push constant 0
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 0
push constant 1
add
pop local 0
goto IF_END0
label IF_FALSE0
push constant 1
neg
pop local 1
label IF_END0
push local 1
push constant 1
sub
pop local 1
goto WHILE_EXP0
label WHILE_END0
push local 0
return
function Int32.u4_array_div_u4_array 15
push constant 16
pop local 0
push constant 16
call Array.new 1
pop local 6
push argument 2
push constant 1
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
pop local 3
push constant 15
pop local 2
label WHILE_EXP0
push local 2
push constant 0
gt
push local 2
push constant 0
eq
or
not
if-goto WHILE_END0
push local 3
push local 0
call Math.multiply 2
push local 2
push argument 0
add
pop pointer 1
push that 0
add
pop local 4
push local 2
push local 6
add
push local 4
push constant 0
push argument 1
add
pop pointer 1
push that 0
call Math.divide 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 4
push local 2
push local 6
add
pop pointer 1
push that 0
push constant 0
push argument 1
add
pop pointer 1
push that 0
call Math.multiply 2
sub
pop local 3
push local 2
push constant 1
sub
pop local 2
goto WHILE_EXP0
label WHILE_END0
push local 6
return
label IF_FALSE0
push argument 2
push constant 1
sub
push argument 1
add
pop pointer 1
push that 0
call Int32.nlz_u4 1
pop local 5
push constant 8
call Array.new 1
pop local 7
push argument 2
push constant 1
sub
pop local 1
label WHILE_EXP1
push local 1
push constant 1
gt
push local 1
push constant 1
eq
or
not
if-goto WHILE_END1
push local 1
push local 7
add
push local 1
push argument 1
add
pop pointer 1
push that 0
push local 5
call Int32.leftshift 2
push local 1
push constant 1
sub
push argument 1
add
pop pointer 1
push that 0
push constant 4
push local 5
sub
call Int32.arith_rightshift 2
or
push constant 15
and
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 1
push constant 1
sub
pop local 1
goto WHILE_EXP1
label WHILE_END1
push constant 0
push local 7
add
push constant 0
push argument 1
add
pop pointer 1
push that 0
push local 5
call Int32.leftshift 2
push constant 15
and
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 17
call Array.new 1
pop local 8
push constant 16
push local 8
add
push constant 15
push argument 0
add
pop pointer 1
push that 0
push constant 4
push local 5
sub
call Int32.arith_rightshift 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 15
pop local 1
label WHILE_EXP2
push local 1
push constant 1
gt
push local 1
push constant 1
eq
or
not
if-goto WHILE_END2
push local 1
push local 8
add
push local 1
push argument 0
add
pop pointer 1
push that 0
push local 5
call Int32.leftshift 2
push local 1
push constant 1
sub
push argument 0
add
pop pointer 1
push that 0
push constant 4
push local 5
sub
call Int32.arith_rightshift 2
or
push constant 15
and
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 1
push constant 1
sub
pop local 1
goto WHILE_EXP2
label WHILE_END2
push constant 0
push local 8
add
push constant 0
push argument 0
add
pop pointer 1
push that 0
push local 5
call Int32.leftshift 2
push constant 15
and
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 16
push argument 2
sub
pop local 2
label WHILE_EXP3
push local 2
push constant 0
gt
push local 2
push constant 0
eq
or
not
if-goto WHILE_END3
push local 2
push argument 2
add
push local 8
add
pop pointer 1
push that 0
push local 0
call Math.multiply 2
push local 2
push argument 2
add
push constant 1
sub
push local 8
add
pop pointer 1
push that 0
add
pop local 4
push local 4
push argument 2
push constant 1
sub
push local 7
add
pop pointer 1
push that 0
call Math.divide 2
pop local 9
push local 4
push local 9
push argument 2
push constant 1
sub
push local 7
add
pop pointer 1
push that 0
call Math.multiply 2
sub
pop local 10
push constant 0
pop local 11
label WHILE_EXP4
push local 11
not
not
if-goto WHILE_END4
push constant 0
not
pop local 11
push local 9
push local 0
gt
push local 9
push local 0
eq
or
push local 9
push argument 2
push constant 2
sub
push local 7
add
pop pointer 1
push that 0
call Math.multiply 2
push local 0
push local 10
call Math.multiply 2
push local 2
push argument 2
add
push constant 2
sub
push local 8
add
pop pointer 1
push that 0
add
gt
or
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 9
push constant 1
sub
pop local 9
push local 10
push argument 2
push constant 1
sub
push local 7
add
pop pointer 1
push that 0
add
pop local 10
push local 10
push local 0
lt
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push constant 0
pop local 11
label IF_FALSE2
label IF_FALSE1
goto WHILE_EXP4
label WHILE_END4
push constant 0
pop local 12
push constant 0
pop local 1
label WHILE_EXP5
push local 1
push argument 2
lt
not
if-goto WHILE_END5
push local 9
push local 1
push local 7
add
pop pointer 1
push that 0
call Math.multiply 2
pop local 13
push local 1
push local 2
add
push local 8
add
pop pointer 1
push that 0
push local 12
sub
push local 13
push constant 15
and
sub
pop local 14
push local 1
push local 2
add
push local 8
add
push local 14
push constant 15
and
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 13
push constant 4
call Int32.arith_rightshift 2
push local 14
push constant 4
call Int32.arith_rightshift 2
sub
pop local 12
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP5
label WHILE_END5
push local 2
push argument 2
add
push local 8
add
pop pointer 1
push that 0
push local 12
sub
pop local 14
push local 2
push argument 2
add
push local 8
add
push local 14
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 2
push local 6
add
push local 9
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 14
push constant 0
lt
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push constant 0
pop local 12
push local 2
push local 6
add
push local 2
push local 6
add
pop pointer 1
push that 0
push constant 1
sub
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
pop local 1
label WHILE_EXP6
push local 1
push argument 2
lt
not
if-goto WHILE_END6
push local 1
push local 2
add
push local 8
add
pop pointer 1
push that 0
push local 1
push local 7
add
pop pointer 1
push that 0
add
push local 12
add
pop local 14
push local 1
push local 2
add
push local 8
add
push local 14
push constant 15
and
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 14
push constant 4
call Int32.arith_rightshift 2
pop local 12
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP6
label WHILE_END6
push local 2
push argument 2
add
push local 8
add
push local 2
push argument 2
add
push local 8
add
pop pointer 1
push that 0
push local 12
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
label IF_FALSE3
push local 2
push constant 1
sub
pop local 2
goto WHILE_EXP3
label WHILE_END3
push local 7
call Array.dispose 1
pop temp 0
push local 8
call Array.dispose 1
pop temp 0
push local 6
return
function Int32.new 3
push constant 1
call Memory.alloc 1
pop pointer 0
push static 0
push constant 1
add
pop static 0
push argument 0
push constant 255
and
pop local 0
push argument 0
push constant 8
call Int32.arith_rightshift 2
push constant 255
and
pop local 1
push argument 0
push constant 0
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 255
pop local 2
goto IF_END0
label IF_FALSE0
push constant 0
pop local 2
label IF_END0
push constant 4
call Array.new 1
pop this 0
push constant 0
push this 0
add
push local 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 1
push this 0
add
push local 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 2
push this 0
add
push local 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 3
push this 0
add
push local 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push pointer 0
return
function Int32.new_from_parts 0
push constant 1
call Memory.alloc 1
pop pointer 0
push static 0
push constant 1
add
pop static 0
push argument 0
pop this 0
push pointer 0
return
function Int32.getParts 0
push argument 0
pop pointer 0
push this 0
return
function Int32.do_add 1
push argument 0
pop pointer 0
push argument 1
call Int32.getParts 1
pop local 0
push constant 0
push this 0
add
push constant 0
push this 0
add
pop pointer 1
push that 0
push constant 0
push local 0
add
pop pointer 1
push that 0
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 1
push this 0
add
push constant 1
push this 0
add
pop pointer 1
push that 0
push constant 1
push local 0
add
pop pointer 1
push that 0
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 2
push this 0
add
push constant 2
push this 0
add
pop pointer 1
push that 0
push constant 2
push local 0
add
pop pointer 1
push that 0
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 3
push this 0
add
push constant 3
push this 0
add
pop pointer 1
push that 0
push constant 3
push local 0
add
pop pointer 1
push that 0
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
label WHILE_EXP0
push constant 0
push this 0
add
pop pointer 1
push that 0
push constant 256
gt
push constant 0
push this 0
add
pop pointer 1
push that 0
push constant 256
eq
or
not
if-goto WHILE_END0
push constant 0
push this 0
add
push constant 0
push this 0
add
pop pointer 1
push that 0
push constant 256
sub
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 1
push this 0
add
push constant 1
push this 0
add
pop pointer 1
push that 0
push constant 1
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
goto WHILE_EXP0
label WHILE_END0
label WHILE_EXP1
push constant 1
push this 0
add
pop pointer 1
push that 0
push constant 256
gt
push constant 1
push this 0
add
pop pointer 1
push that 0
push constant 256
eq
or
not
if-goto WHILE_END1
push constant 1
push this 0
add
push constant 1
push this 0
add
pop pointer 1
push that 0
push constant 256
sub
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 2
push this 0
add
push constant 2
push this 0
add
pop pointer 1
push that 0
push constant 1
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
goto WHILE_EXP1
label WHILE_END1
label WHILE_EXP2
push constant 2
push this 0
add
pop pointer 1
push that 0
push constant 256
gt
push constant 2
push this 0
add
pop pointer 1
push that 0
push constant 256
eq
or
not
if-goto WHILE_END2
push constant 2
push this 0
add
push constant 2
push this 0
add
pop pointer 1
push that 0
push constant 256
sub
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 3
push this 0
add
push constant 3
push this 0
add
pop pointer 1
push that 0
push constant 1
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
goto WHILE_EXP2
label WHILE_END2
label WHILE_EXP3
push constant 3
push this 0
add
pop pointer 1
push that 0
push constant 256
gt
push constant 3
push this 0
add
pop pointer 1
push that 0
push constant 256
eq
or
not
if-goto WHILE_END3
push constant 3
push this 0
add
push constant 3
push this 0
add
pop pointer 1
push that 0
push constant 256
sub
pop temp 0
pop pointer 1
push temp 0
pop that 0
goto WHILE_EXP3
label WHILE_END3
push constant 0
return
function Int32.clone 1
push argument 0
pop pointer 0
push constant 4
call Array.new 1
pop local 0
push constant 0
push local 0
add
push constant 0
push this 0
add
pop pointer 1
push that 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 1
push local 0
add
push constant 1
push this 0
add
pop pointer 1
push that 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 2
push local 0
add
push constant 2
push this 0
add
pop pointer 1
push that 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 3
push local 0
add
push constant 3
push this 0
add
pop pointer 1
push that 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
call Int32.new_from_parts 1
return
function Int32.dispose 0
push argument 0
pop pointer 0
push static 0
push constant 1
sub
pop static 0
push this 0
call Array.dispose 1
pop temp 0
push pointer 0
call Memory.deAlloc 1
pop temp 0
push constant 0
return
function Int32.do_sub 1
push argument 0
pop pointer 0
push argument 1
call Int32.clone 1
pop local 0
push local 0
call Int32.do_neg 1
pop temp 0
push pointer 0
push local 0
call Int32.do_add 2
pop temp 0
push local 0
call Int32.dispose 1
pop temp 0
push constant 0
return
function Int32.do_mul 0
push argument 0
pop pointer 0
push pointer 0
push argument 1
push constant 0
call Int32.do_mul_right_shift_bytes 3
pop temp 0
push constant 0
return
function Int32.do_right_shift_bytes 1
push argument 0
pop pointer 0
push argument 1
push constant 0
lt
push argument 1
push constant 0
eq
or
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
return
label IF_FALSE0
push pointer 0
call Int32.is_negative 1
pop local 0
push local 0
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push pointer 0
call Int32.do_neg 1
pop temp 0
label IF_FALSE1
push constant 0
push this 0
add
push argument 1
push this 0
add
pop pointer 1
push that 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push argument 1
push constant 3
lt
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push constant 1
push this 0
add
push argument 1
push constant 1
add
push this 0
add
pop pointer 1
push that 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
goto IF_END2
label IF_FALSE2
push constant 1
push this 0
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
label IF_END2
push argument 1
push constant 2
lt
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push constant 2
push this 0
add
push argument 1
push constant 2
add
push this 0
add
pop pointer 1
push that 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
goto IF_END3
label IF_FALSE3
push constant 2
push this 0
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
label IF_END3
push constant 3
push this 0
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push pointer 0
call Int32.do_neg 1
pop temp 0
label IF_FALSE4
push constant 0
return
function Int32.do_left_shift_bytes 0
push argument 0
pop pointer 0
push argument 1
push constant 0
lt
push argument 1
push constant 0
eq
or
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
return
label IF_FALSE0
push constant 3
push this 0
add
push constant 3
push argument 1
sub
push this 0
add
pop pointer 1
push that 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push argument 1
push constant 3
lt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 2
push this 0
add
push constant 2
push argument 1
sub
push this 0
add
pop pointer 1
push that 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
goto IF_END1
label IF_FALSE1
push constant 2
push this 0
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
label IF_END1
push argument 1
push constant 2
lt
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push constant 1
push this 0
add
push constant 1
push argument 1
sub
push this 0
add
pop pointer 1
push that 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
goto IF_END2
label IF_FALSE2
push constant 1
push this 0
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
label IF_END2
push constant 0
push this 0
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return
function Int32.xor 0
push argument 0
push argument 1
not
and
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
not
return
label IF_FALSE0
push argument 1
push argument 0
not
and
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 0
not
return
label IF_FALSE1
push constant 0
return
function Int32.do_mul_right_shift_bytes 9
push argument 0
pop pointer 0
push constant 0
pop local 2
push constant 0
pop local 3
push pointer 0
call Int32.is_negative 1
push argument 1
call Int32.is_negative 1
call Int32.xor 2
pop local 4
push pointer 0
call Int32.is_negative 1
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push pointer 0
call Int32.clone 1
pop local 2
push local 2
call Int32.do_abs 1
pop temp 0
push local 2
call Int32.getParts 1
pop local 0
goto IF_END0
label IF_FALSE0
push this 0
pop local 0
label IF_END0
push argument 1
call Int32.is_negative 1
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push argument 1
call Int32.clone 1
pop local 3
push local 3
call Int32.do_abs 1
pop temp 0
push local 3
call Int32.getParts 1
pop local 1
goto IF_END1
label IF_FALSE1
push argument 1
call Int32.getParts 1
pop local 1
label IF_END1
push constant 8
call Array.new 1
pop local 5
push constant 0
push local 5
add
push constant 0
push local 0
add
pop pointer 1
push that 0
push constant 15
and
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 1
push local 5
add
push constant 0
push local 0
add
pop pointer 1
push that 0
push constant 4
call Int32.arith_rightshift 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 2
push local 5
add
push constant 1
push local 0
add
pop pointer 1
push that 0
push constant 15
and
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 3
push local 5
add
push constant 1
push local 0
add
pop pointer 1
push that 0
push constant 4
call Int32.arith_rightshift 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 4
push local 5
add
push constant 2
push local 0
add
pop pointer 1
push that 0
push constant 15
and
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 5
push local 5
add
push constant 2
push local 0
add
pop pointer 1
push that 0
push constant 4
call Int32.arith_rightshift 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 6
push local 5
add
push constant 3
push local 0
add
pop pointer 1
push that 0
push constant 15
and
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 7
push local 5
add
push constant 3
push local 0
add
pop pointer 1
push that 0
push constant 4
call Int32.arith_rightshift 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 8
call Array.new 1
pop local 6
push constant 0
push local 6
add
push constant 0
push local 1
add
pop pointer 1
push that 0
push constant 15
and
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 1
push local 6
add
push constant 0
push local 1
add
pop pointer 1
push that 0
push constant 4
call Int32.arith_rightshift 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 2
push local 6
add
push constant 1
push local 1
add
pop pointer 1
push that 0
push constant 15
and
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 3
push local 6
add
push constant 1
push local 1
add
pop pointer 1
push that 0
push constant 4
call Int32.arith_rightshift 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 4
push local 6
add
push constant 2
push local 1
add
pop pointer 1
push that 0
push constant 15
and
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 5
push local 6
add
push constant 2
push local 1
add
pop pointer 1
push that 0
push constant 4
call Int32.arith_rightshift 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 6
push local 6
add
push constant 3
push local 1
add
pop pointer 1
push that 0
push constant 15
and
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 7
push local 6
add
push constant 3
push local 1
add
pop pointer 1
push that 0
push constant 4
call Int32.arith_rightshift 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 5
push local 6
call Int32.u4_array_mul_u4_array 2
pop local 7
push argument 2
push constant 2
call Math.multiply 2
pop local 8
push constant 0
push this 0
add
push local 8
push constant 0
add
push local 7
add
pop pointer 1
push that 0
push local 8
push constant 1
add
push local 7
add
pop pointer 1
push that 0
push constant 16
call Math.multiply 2
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 1
push this 0
add
push local 8
push constant 2
add
push local 7
add
pop pointer 1
push that 0
push local 8
push constant 3
add
push local 7
add
pop pointer 1
push that 0
push constant 16
call Math.multiply 2
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 2
push this 0
add
push local 8
push constant 4
add
push local 7
add
pop pointer 1
push that 0
push local 8
push constant 5
add
push local 7
add
pop pointer 1
push that 0
push constant 16
call Math.multiply 2
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 3
push this 0
add
push local 8
push constant 6
add
push local 7
add
pop pointer 1
push that 0
push local 8
push constant 7
add
push local 7
add
pop pointer 1
push that 0
push constant 16
call Math.multiply 2
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 4
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push pointer 0
call Int32.do_neg 1
pop temp 0
label IF_FALSE2
push local 2
push constant 0
eq
not
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push local 2
call Int32.dispose 1
pop temp 0
label IF_FALSE3
push local 3
push constant 0
eq
not
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push local 3
call Int32.dispose 1
pop temp 0
label IF_FALSE4
push local 5
call Array.dispose 1
pop temp 0
push local 6
call Array.dispose 1
pop temp 0
push local 7
call Array.dispose 1
pop temp 0
push constant 0
return
function Int32.do_div 0
push argument 0
pop pointer 0
push pointer 0
push constant 0
push argument 1
call Int32.do_left_shift_bytes_div 3
pop temp 0
push constant 0
return
function Int32.do_left_shift_bytes_div 11
push argument 0
pop pointer 0
push constant 0
pop local 2
push constant 0
pop local 3
push pointer 0
call Int32.is_negative 1
push argument 2
call Int32.is_negative 1
call Int32.xor 2
pop local 4
push pointer 0
call Int32.is_negative 1
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push pointer 0
call Int32.clone 1
pop local 2
push local 2
call Int32.do_abs 1
pop temp 0
push local 2
call Int32.getParts 1
pop local 0
goto IF_END0
label IF_FALSE0
push this 0
pop local 0
label IF_END0
push argument 2
call Int32.is_negative 1
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push argument 2
call Int32.clone 1
pop local 3
push local 3
call Int32.do_abs 1
pop temp 0
push local 3
call Int32.getParts 1
pop local 1
goto IF_END1
label IF_FALSE1
push argument 2
call Int32.getParts 1
pop local 1
label IF_END1
push constant 8
call Array.new 1
pop local 5
push argument 1
push constant 0
eq
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push constant 0
push local 5
add
push constant 0
push argument 1
sub
push local 0
add
pop pointer 1
push that 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
goto IF_END2
label IF_FALSE2
push constant 0
push local 5
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
label IF_END2
push argument 1
push constant 2
lt
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push constant 1
push local 5
add
push constant 1
push argument 1
sub
push local 0
add
pop pointer 1
push that 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
goto IF_END3
label IF_FALSE3
push constant 1
push local 5
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
label IF_END3
push argument 1
push constant 3
lt
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push constant 2
push local 5
add
push constant 2
push argument 1
sub
push local 0
add
pop pointer 1
push that 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
goto IF_END4
label IF_FALSE4
push constant 2
push local 5
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
label IF_END4
push argument 1
push constant 4
lt
if-goto IF_TRUE5
goto IF_FALSE5
label IF_TRUE5
push constant 3
push local 5
add
push constant 3
push argument 1
sub
push local 0
add
pop pointer 1
push that 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
goto IF_END5
label IF_FALSE5
push constant 3
push local 5
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
label IF_END5
push argument 1
push constant 0
gt
if-goto IF_TRUE6
goto IF_FALSE6
label IF_TRUE6
push constant 4
push local 5
add
push constant 4
push argument 1
sub
push local 0
add
pop pointer 1
push that 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
goto IF_END6
label IF_FALSE6
push constant 4
push local 5
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
label IF_END6
push argument 1
push constant 1
gt
if-goto IF_TRUE7
goto IF_FALSE7
label IF_TRUE7
push constant 5
push local 5
add
push constant 5
push argument 1
sub
push local 0
add
pop pointer 1
push that 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
goto IF_END7
label IF_FALSE7
push constant 5
push local 5
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
label IF_END7
push argument 1
push constant 2
gt
if-goto IF_TRUE8
goto IF_FALSE8
label IF_TRUE8
push constant 6
push local 5
add
push constant 6
push argument 1
sub
push local 0
add
pop pointer 1
push that 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
goto IF_END8
label IF_FALSE8
push constant 6
push local 5
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
label IF_END8
push constant 7
push local 5
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 16
call Array.new 1
pop local 6
push constant 0
push local 6
add
push constant 0
push local 5
add
pop pointer 1
push that 0
push constant 15
and
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 1
push local 6
add
push constant 0
push local 5
add
pop pointer 1
push that 0
push constant 4
call Int32.arith_rightshift 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 2
push local 6
add
push constant 1
push local 5
add
pop pointer 1
push that 0
push constant 15
and
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 3
push local 6
add
push constant 1
push local 5
add
pop pointer 1
push that 0
push constant 4
call Int32.arith_rightshift 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 4
push local 6
add
push constant 2
push local 5
add
pop pointer 1
push that 0
push constant 15
and
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 5
push local 6
add
push constant 2
push local 5
add
pop pointer 1
push that 0
push constant 4
call Int32.arith_rightshift 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 6
push local 6
add
push constant 3
push local 5
add
pop pointer 1
push that 0
push constant 15
and
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 7
push local 6
add
push constant 3
push local 5
add
pop pointer 1
push that 0
push constant 4
call Int32.arith_rightshift 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 8
push local 6
add
push constant 4
push local 5
add
pop pointer 1
push that 0
push constant 15
and
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 9
push local 6
add
push constant 4
push local 5
add
pop pointer 1
push that 0
push constant 4
call Int32.arith_rightshift 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 10
push local 6
add
push constant 5
push local 5
add
pop pointer 1
push that 0
push constant 15
and
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 11
push local 6
add
push constant 5
push local 5
add
pop pointer 1
push that 0
push constant 4
call Int32.arith_rightshift 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 12
push local 6
add
push constant 6
push local 5
add
pop pointer 1
push that 0
push constant 15
and
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 13
push local 6
add
push constant 6
push local 5
add
pop pointer 1
push that 0
push constant 4
call Int32.arith_rightshift 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 14
push local 6
add
push constant 7
push local 5
add
pop pointer 1
push that 0
push constant 15
and
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 15
push local 6
add
push constant 7
push local 5
add
pop pointer 1
push that 0
push constant 4
call Int32.arith_rightshift 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 8
call Array.new 1
pop local 7
push constant 0
push local 7
add
push constant 0
push local 1
add
pop pointer 1
push that 0
push constant 15
and
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 1
push local 7
add
push constant 0
push local 1
add
pop pointer 1
push that 0
push constant 4
call Int32.arith_rightshift 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 2
push local 7
add
push constant 1
push local 1
add
pop pointer 1
push that 0
push constant 15
and
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 3
push local 7
add
push constant 1
push local 1
add
pop pointer 1
push that 0
push constant 4
call Int32.arith_rightshift 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 4
push local 7
add
push constant 2
push local 1
add
pop pointer 1
push that 0
push constant 15
and
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 5
push local 7
add
push constant 2
push local 1
add
pop pointer 1
push that 0
push constant 4
call Int32.arith_rightshift 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 6
push local 7
add
push constant 3
push local 1
add
pop pointer 1
push that 0
push constant 15
and
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 7
push local 7
add
push constant 3
push local 1
add
pop pointer 1
push that 0
push constant 4
call Int32.arith_rightshift 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 255
pop local 8
push constant 7
pop local 9
label WHILE_EXP0
push local 9
push constant 0
gt
push local 9
push constant 0
eq
or
not
if-goto WHILE_END0
push local 9
push local 7
add
pop pointer 1
push that 0
push constant 0
gt
if-goto IF_TRUE9
goto IF_FALSE9
label IF_TRUE9
push local 9
push constant 1
add
pop local 8
push constant 1
neg
pop local 9
label IF_FALSE9
push local 9
push constant 1
sub
pop local 9
goto WHILE_EXP0
label WHILE_END0
push local 6
push local 7
push local 8
call Int32.u4_array_div_u4_array 3
pop local 10
push constant 0
push this 0
add
push constant 0
push local 10
add
pop pointer 1
push that 0
push constant 1
push local 10
add
pop pointer 1
push that 0
push constant 16
call Math.multiply 2
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 1
push this 0
add
push constant 2
push local 10
add
pop pointer 1
push that 0
push constant 3
push local 10
add
pop pointer 1
push that 0
push constant 16
call Math.multiply 2
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 2
push this 0
add
push constant 4
push local 10
add
pop pointer 1
push that 0
push constant 5
push local 10
add
pop pointer 1
push that 0
push constant 16
call Math.multiply 2
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 3
push this 0
add
push constant 6
push local 10
add
pop pointer 1
push that 0
push constant 7
push local 10
add
pop pointer 1
push that 0
push constant 16
call Math.multiply 2
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 4
if-goto IF_TRUE10
goto IF_FALSE10
label IF_TRUE10
push pointer 0
call Int32.do_neg 1
pop temp 0
label IF_FALSE10
push local 2
push constant 0
eq
not
if-goto IF_TRUE11
goto IF_FALSE11
label IF_TRUE11
push local 2
call Int32.dispose 1
pop temp 0
label IF_FALSE11
push local 3
push constant 0
eq
not
if-goto IF_TRUE12
goto IF_FALSE12
label IF_TRUE12
push local 3
call Int32.dispose 1
pop temp 0
label IF_FALSE12
push local 5
call Array.dispose 1
pop temp 0
push local 6
call Array.dispose 1
pop temp 0
push local 7
call Array.dispose 1
pop temp 0
push local 10
call Array.dispose 1
pop temp 0
push constant 0
return
function Int32.do_abs 0
push argument 0
pop pointer 0
push pointer 0
call Int32.is_negative 1
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push pointer 0
call Int32.do_neg 1
pop temp 0
label IF_FALSE0
push constant 0
return
function Int32.initial_sqrt_guess 2
push argument 0
pop pointer 0
push constant 3
push this 0
add
pop pointer 1
push that 0
push constant 0
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 11
call Int32.new 1
pop local 0
push constant 4096
call Int32.new 1
pop local 1
push local 0
push local 1
call Int32.do_mul 2
pop temp 0
push local 1
call Int32.dispose 1
pop temp 0
push local 0
return
label IF_FALSE0
push constant 2
push this 0
add
pop pointer 1
push that 0
push constant 0
gt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 11
call Int32.new 1
pop local 0
push constant 256
call Int32.new 1
pop local 1
push local 0
push local 1
call Int32.do_mul 2
pop temp 0
push local 1
call Int32.dispose 1
pop temp 0
push local 0
return
label IF_FALSE1
push constant 1
push this 0
add
pop pointer 1
push that 0
push constant 0
gt
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push constant 11
call Int32.new 1
pop local 0
push constant 16
call Int32.new 1
pop local 1
push local 0
push local 1
call Int32.do_mul 2
pop temp 0
push local 1
call Int32.dispose 1
pop temp 0
push local 0
return
label IF_FALSE2
push constant 11
call Int32.new 1
return
function Int32.do_sqrt 6
push argument 0
pop pointer 0
push pointer 0
call Int32.is_zero 1
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
return
label IF_FALSE0
push constant 2
call Int32.new 1
pop local 2
push constant 1
neg
call Int32.new 1
pop local 0
push pointer 0
call Int32.initial_sqrt_guess 1
pop local 1
push constant 0
pop local 4
label WHILE_EXP0
push local 4
push constant 20
lt
push local 0
push local 1
call Int32.cmp 2
push constant 0
eq
not
and
not
if-goto WHILE_END0
push pointer 0
call Int32.clone 1
pop local 3
push local 3
push local 1
call Int32.do_div 2
pop temp 0
push local 0
call Int32.dispose 1
pop temp 0
push local 1
call Int32.clone 1
pop local 0
push local 1
push local 3
call Int32.do_add 2
pop temp 0
push local 1
push local 2
call Int32.do_div 2
pop temp 0
push local 3
call Int32.dispose 1
pop temp 0
push local 4
push constant 1
add
pop local 4
goto WHILE_EXP0
label WHILE_END0
push local 1
call Int32.getParts 1
pop local 5
push constant 0
push this 0
add
push constant 0
push local 5
add
pop pointer 1
push that 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 1
push this 0
add
push constant 1
push local 5
add
pop pointer 1
push that 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 2
push this 0
add
push constant 2
push local 5
add
pop pointer 1
push that 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 3
push this 0
add
push constant 3
push local 5
add
pop pointer 1
push that 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 2
call Int32.dispose 1
pop temp 0
push local 1
call Int32.dispose 1
pop temp 0
push local 0
call Int32.dispose 1
pop temp 0
push constant 0
return
function Int32.do_neg 0
push argument 0
pop pointer 0
push constant 0
push this 0
add
push constant 0
push this 0
add
pop pointer 1
push that 0
not
push constant 255
and
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 1
push this 0
add
push constant 1
push this 0
add
pop pointer 1
push that 0
not
push constant 255
and
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 2
push this 0
add
push constant 2
push this 0
add
pop pointer 1
push that 0
not
push constant 255
and
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 3
push this 0
add
push constant 3
push this 0
add
pop pointer 1
push that 0
not
push constant 255
and
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
push this 0
add
push constant 0
push this 0
add
pop pointer 1
push that 0
push constant 1
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
push this 0
add
pop pointer 1
push that 0
push constant 256
gt
push constant 0
push this 0
add
pop pointer 1
push that 0
push constant 256
eq
or
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
push this 0
add
push constant 0
push this 0
add
pop pointer 1
push that 0
push constant 256
sub
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 1
push this 0
add
push constant 1
push this 0
add
pop pointer 1
push that 0
push constant 1
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
label IF_FALSE0
push constant 1
push this 0
add
pop pointer 1
push that 0
push constant 256
gt
push constant 1
push this 0
add
pop pointer 1
push that 0
push constant 256
eq
or
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 1
push this 0
add
push constant 1
push this 0
add
pop pointer 1
push that 0
push constant 256
sub
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 2
push this 0
add
push constant 2
push this 0
add
pop pointer 1
push that 0
push constant 1
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
label IF_FALSE1
push constant 2
push this 0
add
pop pointer 1
push that 0
push constant 256
gt
push constant 2
push this 0
add
pop pointer 1
push that 0
push constant 256
eq
or
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push constant 2
push this 0
add
push constant 2
push this 0
add
pop pointer 1
push that 0
push constant 256
sub
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 3
push this 0
add
push constant 3
push this 0
add
pop pointer 1
push that 0
push constant 1
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
label IF_FALSE2
push constant 3
push this 0
add
pop pointer 1
push that 0
push constant 256
gt
push constant 3
push this 0
add
pop pointer 1
push that 0
push constant 256
eq
or
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push constant 3
push this 0
add
push constant 3
push this 0
add
pop pointer 1
push that 0
push constant 256
sub
pop temp 0
pop pointer 1
push temp 0
pop that 0
label IF_FALSE3
push constant 0
return
function Int32.is_zero 0
push argument 0
pop pointer 0
push constant 0
push this 0
add
pop pointer 1
push that 0
push constant 0
eq
push constant 1
push this 0
add
pop pointer 1
push that 0
push constant 0
eq
and
push constant 2
push this 0
add
pop pointer 1
push that 0
push constant 0
eq
and
push constant 3
push this 0
add
pop pointer 1
push that 0
push constant 0
eq
and
return
function Int32.is_negative 0
push argument 0
pop pointer 0
push constant 3
push this 0
add
pop pointer 1
push that 0
push constant 128
gt
push constant 3
push this 0
add
pop pointer 1
push that 0
push constant 128
eq
or
return
function Int32.is_positive 0
push argument 0
pop pointer 0
push pointer 0
call Int32.is_zero 1
not
push constant 3
push this 0
add
pop pointer 1
push that 0
push constant 128
lt
and
return
function Int32.cmp 2
push argument 0
pop pointer 0
push pointer 0
call Int32.clone 1
pop local 0
push local 0
push argument 1
call Int32.do_sub 2
pop temp 0
push local 0
call Int32.is_zero 1
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
pop local 1
goto IF_END0
label IF_FALSE0
push local 0
call Int32.is_negative 1
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 1
neg
pop local 1
goto IF_END1
label IF_FALSE1
push constant 1
pop local 1
label IF_END1
label IF_END0
push local 0
call Int32.dispose 1
pop temp 0
push local 1
return
function Int32.do_zero 0
push argument 0
pop pointer 0
push constant 0
push this 0
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 1
push this 0
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 2
push this 0
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 3
push this 0
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return
function Int32.print 0
push argument 0
pop pointer 0
push constant 1
call String.new 1
push constant 91
call String.appendChar 2
call Output.printString 1
pop temp 0
push constant 0
push this 0
add
pop pointer 1
push that 0
call Output.printInt 1
pop temp 0
push constant 1
call String.new 1
push constant 32
call String.appendChar 2
call Output.printString 1
pop temp 0
push constant 1
push this 0
add
pop pointer 1
push that 0
call Output.printInt 1
pop temp 0
push constant 1
call String.new 1
push constant 32
call String.appendChar 2
call Output.printString 1
pop temp 0
push constant 2
push this 0
add
pop pointer 1
push that 0
call Output.printInt 1
pop temp 0
push constant 1
call String.new 1
push constant 32
call String.appendChar 2
call Output.printString 1
pop temp 0
push constant 3
push this 0
add
pop pointer 1
push that 0
call Output.printInt 1
pop temp 0
push constant 1
call String.new 1
push constant 93
call String.appendChar 2
call Output.printString 1
pop temp 0
push constant 0
return
function Int32.printAllocs 0
push constant 14
call String.new 1
push constant 105
call String.appendChar 2
push constant 110
call String.appendChar 2
push constant 116
call String.appendChar 2
push constant 51
call String.appendChar 2
push constant 50
call String.appendChar 2
push constant 32
call String.appendChar 2
push constant 97
call String.appendChar 2
push constant 108
call String.appendChar 2
push constant 108
call String.appendChar 2
push constant 111
call String.appendChar 2
push constant 99
call String.appendChar 2
push constant 115
call String.appendChar 2
push constant 58
call String.appendChar 2
push constant 32
call String.appendChar 2
call Output.printString 1
pop temp 0
push static 0
call Output.printInt 1
pop temp 0
call Output.println 0
pop temp 0
push constant 0
return
function Int32.is_even 0
push argument 0
pop pointer 0
push constant 0
push this 0
add
pop pointer 1
push that 0
push constant 1
and
push constant 0
eq
return
